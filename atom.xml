<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>🍋阿檸賺大錢走上人生巔峰🍋</title>
  
  <subtitle>嚕貓,賺大錢,躺大床</subtitle>
  <link href="https://example.com/atom.xml" rel="self"/>
  
  <link href="https://example.com/"/>
  <updated>2022-11-29T22:38:14.000Z</updated>
  <id>https://example.com/</id>
  
  <author>
    <name>Lynn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://example.com/2023/03/01/hello-world/"/>
    <id>https://example.com/2023/03/01/hello-world/</id>
    <published>2023-03-01T02:22:11.585Z</published>
    <updated>2022-11-29T22:38:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>終於到這一天</title>
    <link href="https://example.com/2023/02/25/goToWorkLa/"/>
    <id>https://example.com/2023/02/25/goToWorkLa/</id>
    <published>2023-02-25T02:13:52.000Z</published>
    <updated>2023-02-26T18:33:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>封面圖是我初學程式寫 C 時為了紀念的截圖(2022&#x2F;05&#x2F;08)。</p><p>時間過的真的很快，一轉眼 569 個小時的課就要結束了。<br>感謝政府的資源讓我可以上補助班，感謝爪哇社群的小夥伴們讓我除了課程的東西以外，知道很多業界基礎。<br>感謝家人的支持，<br>感謝願意踏出這一步的我自己。</p><blockquote><p>找到工作啦!!!!!!!!!!</p></blockquote><p>我從來不會特別提自己念到大三休學，大學肄業的事。<br>但我想證明這樣並不比那些所謂”學歷完整的人”差。</p><p>我從很早以前就有這種想法了，不想要做事情是為了將就而做，而是我真的想做什麼，去做才有意義。<br>說起來是很任性的，肆意妄為，在別人眼裡是對自己人生的不負責任，我父親就特別的不理解我。<br>在我父親的眼裡，學歷是最重要的，像他最愛的大女兒就念完了臺科大碩士，這讓他倍感有面子。<br>所以在我告知他休學的時候他特別無法理解，成天要我再去考個什麼或是念個什麼，<br>他其實不明白我不喜歡念書以及我要尋找我想做的事這些事。<br>但的確，那時的我是讓人擔心的。不知道要做什麼，只知道”不要做什麼”，開始長達三年的工作之路。<br>我很感恩有這些工作經驗，因為這些都是很寶貴的，我走尋常路不一定得到的經驗。</p><p>從這些經驗，我得出了一些結論 :</p><ul><li>我學習能力是絕對突出的</li><li>只要是我真正想做的事，我是不會三分鐘熱度的</li><li>我絕對不比別人差，甚至比一些所謂學歷完整的人好</li></ul><p>很感恩的是，我找到了很適合我，我也很喜歡的產業。並在裡面學的很開心。</p><p>我是有點在意的，關於學歷不完整這件事。因為在台灣就是如此。<br>但在這個領域我只要強到讓人可以無視學歷了對吧?</p><p>我感恩一切，感恩媽媽的支持，感謝自己的條件相較優渥，感恩一路上遇到一堆貴人(真的是成堆出現)，感謝命運賜給我的幸運。</p><p>我真的是非常幸運!!!!!!!!<br>找到的工作也是我想應用以及學的技術。<br>希望以後會越來越好，我堅信自己是個幸運的人，以後也是。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;封面圖是我初學程式寫 C 時為了紀念的截圖(2022&amp;#x2F;05&amp;#x2F;08)。&lt;/p&gt;
&lt;p&gt;時間過的真的很快，一轉眼 569 個小時的課就要結束了。&lt;br&gt;感謝政府的資源讓我可以上補助班，感謝爪哇社群的小夥伴們讓我除了課程的東西以外，知道很多業界基礎。&lt;br&gt;感</summary>
      
    
    
    
    <category term="生活" scheme="https://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 加入 Spring Boot</title>
    <link href="https://example.com/2023/02/21/mybatisInSpring/"/>
    <id>https://example.com/2023/02/21/mybatisInSpring/</id>
    <published>2023-02-21T11:45:01.000Z</published>
    <updated>2023-02-20T20:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-加入-Spring-Boot"><a href="#MyBatis-加入-Spring-Boot" class="headerlink" title="MyBatis 加入 Spring Boot"></a>MyBatis 加入 Spring Boot</h1><blockquote><p>加入依賴</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建立映射檔 src&#x2F;main&#x2F;resources<br>建立 mapper fold -&gt; MemberMapper.xml<br>並在&lt;select&gt; 裡面寫 SQL 語句</p><blockquote><p>有 CRUD 的 tag</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;tw.idv.lynn.web.member.mapper.MemberMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span> = <span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;tw.idv.lynn.web.member.entity.Member&quot;</span>&gt;</span></span><br><span class="line">select * from MEMBER</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新增一個介面(與 MemberMapper.xml 成對出現)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MemberMapper</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>.class 名稱要與 namespace 一樣</p></blockquote><p>訂方法，名稱要對映 tag，id 對應方法名，resultType 對應回傳實體</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MemberMapper</span> &#123;</span><br><span class="line">List&lt;Member&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>告訴工具要掃描映射檔</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MyBatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>修改 service 實作層</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MemberService</span> &#123;</span><br><span class="line"><span class="comment">//略。。。</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MemberMapper mapper;</span><br><span class="line"><span class="comment">//略。。。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Member&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//return memberRepo.findAll();</span></span><br><span class="line"><span class="keyword">return</span> mapper.selectAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>啟動 server 實測。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis-加入-Spring-Boot&quot;&gt;&lt;a href=&quot;#MyBatis-加入-Spring-Boot&quot; class=&quot;headerlink&quot; title=&quot;MyBatis 加入 Spring Boot&quot;&gt;&lt;/a&gt;MyBatis 加入 Spring Bo</summary>
      
    
    
    
    <category term="筆記" scheme="https://example.com/categories/%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="MyBatis" scheme="https://example.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot</title>
    <link href="https://example.com/2023/02/20/Spring-boot/"/>
    <id>https://example.com/2023/02/20/Spring-boot/</id>
    <published>2023-02-20T12:56:37.000Z</published>
    <updated>2023-02-20T20:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什麼是-Spring-Boot"><a href="#什麼是-Spring-Boot" class="headerlink" title="什麼是 Spring Boot ?"></a>什麼是 Spring Boot ?</h1><blockquote><p>大致包含三大要素</p></blockquote><ul><li>starter 整合程式庫 :<br>不用一一找版本加入(利用 Maven 功能整合依賴項目)，提供很多 starter，開發者可依需求選用。</li><li>自動組態(Auto Configuration) :<br>EX.使用啟動器 spring-boot-starter-web，預設會註冊 DispatcherServlet、託管 View 解析器(InternalResourceViewResolver)</li><li>內嵌執行環境(embedded Web Server) :<br>不需要額外的 web server<br>EX.使用啟動器 spring-boot-starter-web，預設會自帶 Tomcat</li></ul><p>另外提供 CLI(Command Line Interface )及執行器(Actuator)。</p><pre><code>**注 :CLI 是 Command Line Interface 的縮寫，中文為命令列面，是一種文字化的使用者介面。通常是透過終端（Terminal）或命令提示字元（Command Prompt）等軟體，鍵盤輸入指令，並以文字的方式呈現結果。CLI 可以用來控制腦、操作檔案、執行程式等，並且通常是自由軟體的一部分。相對於圖形使用者介面（GUI），CLI 的優勢在於其快速、靈和可編程的特性。使用者可以透過鍵盤輸入指令，不需要透過鼠點選圖形介面上的按鈕，這可以提高操作速度和效率。同時CLI 也提供了豐富的指令選   項和參數，可以透過組合指令參數實現更加複雜的操作。常見的 CLI 包括 Unix/Linux 系統中的 shell，以及Windows 系統中的命令提示字元（Command Prompt）和Windows PowerShell 等。除了系統自帶的 CLI，還有許多第方的 CLI 工具和腳本語言，例如 Git、Docker、Python 等這些工具可以透過命令行實現自動化操作和快速部署。</code></pre><blockquote><p>約定優於組態(Convention over Configuration)</p></blockquote><p>資料庫 table 名為 Member，基於 ORM 對應類別名應該也要為 Member<br>如果跟約定的不一樣，需要額外做映射。<br>另外，此將開發者們常用的組態設定視為約定，如不合用就另外自行設定。</p><blockquote><p>Spring Boot 的精神為，讓開發者做最少的前置作業，即可開始開發。</p></blockquote><h1 id="starter-機制"><a href="#starter-機制" class="headerlink" title="starter 機制"></a>starter 機制</h1><blockquote><p>Spring Boot 利用 Maven 的依賴&#x2F;繼承，定義幾個模塊</p></blockquote><ul><li>spring-boot-dependencies<br>使用 Maven 的<dependencyManagement>標籤，封裝所有 Spring 系列框架，⼀般不會直接使用，僅當作 spring-boot-starter-parent 的父模塊</li><li>spring-boot-starter-parent<br>設定所有 Spring Boot Starter 專案所需的 Maven 專案相關設定<br>⼀般不會直接使用，僅當作自建的 Spring Boot Starter 專案之⽗模塊</li><li>spring-boot-starter-*<br>封裝針對某功能相關的 Spring 系列框架的程式庫，會直接使用，當作自建的 Spring Boot Starter 專案之依賴<br>EX. spring-boot-starter-web，封裝了以下程式庫<ul><li>spring-web</li><li>spring-webmvc</li><li>spring-boot-starter-json</li><li>spring-boot-starter-tomcat</li></ul></li></ul><blockquote><p>自建的 Spring Boot Starter 專案。。。</p></blockquote><ul><li>靠間接繼承 spring-boot-dependencies，處理程式庫間版本支援</li><li>靠繼承 spring-boot-starter-parent，獲得 Maven 專案相關設定</li><li>靠使用 spring-boot-starter-*，加入 Spring 系列框架程式庫</li></ul><p>starter 可分成 3 個大類 :</p><ul><li>application : 應用程式類</li><li>production : 正式環境類</li><li>technical : 系統層級類</li></ul><p>常見啟動器詳見講義。</p><h1 id="封裝成-jar-與-war-的差別"><a href="#封裝成-jar-與-war-的差別" class="headerlink" title="封裝成 jar 與 war 的差別"></a>封裝成 jar 與 war 的差別</h1><p>Spring Boot 用非 web 專案就可以執行，如果想要放到另外一台 application Server 上執行，或是要使用 JSP，才需要包成 war，如想要直接下指令 run 可以包成 jar 即可。</p><h1 id="Spring-Boot-Starter-專案"><a href="#Spring-Boot-Starter-專案" class="headerlink" title="Spring Boot Starter 專案"></a>Spring Boot Starter 專案</h1><blockquote><p>針對專案結構做說明</p></blockquote><p>預設會建立 專案名 Application.java，是 Spring Boot Starter 專案得主類別，裡面有 main 方法，為執行的進入點。<br>其特徵為@SpringBootApplication，以及呼叫 SpringApplication.run()。</p><p>@SpringBootApplication 包含 3 個 Annotation :</p><ul><li>@SpringBootConfiguration : 設定為 Spring Boot 核心組態類別，等同於非 Spring Boot 中的@Configuration</li><li>@EnableAutoConfiguration : 啟用自動組態</li><li>@ComponentScan : 指定掃描 Bean 元件，預設掃描套件為新建 Spring Boot Starter 專案時，設定的根套件名(Package)</li></ul><p>SpringApplication.run() 為 Spring Boot 環境的程式進入點</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LynnProjectApplication</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(LynnProjectApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果新建時打包成 war，會生成 ServletInitializer.java，為部署描述類別，是 web.xml 的取代品</p><blockquote><p>資源目錄</p></blockquote><p>這裡比較特別要注意的是，靜態資源的位置有較大的變化。在 src&#x2F;main&#x2F;resources 下，有 static 和 templates 目錄。</p><ul><li>static : 為 Web 靜態資源目錄，通常放.js .css .img 之類的檔案，jsp 放置此處毫無作用</li><li>templates : 為 Thymeleaf 專用資源目錄(Spring Boot 推薦在 Spring MVC 的 View 層使用 Thymeleaf)</li><li>application.properties : Spring Boot 核心組態檔</li></ul><blockquote><p>測試程式目錄 src&#x2F;test&#x2F;java</p></blockquote><p>預設會建立，測試程式放此</p><blockquote><p>Web 根目錄(webapp)</p></blockquote><p>打包方式選 war 才會建立，即 Java web 的 webapp 目錄，若需要在 Spring Boot 中使用 JSP，須放至此目錄(需 WEB-INF ⽬錄，則須手動建⽴)</p><h1 id="靜態資源管理機制"><a href="#靜態資源管理機制" class="headerlink" title="靜態資源管理機制"></a>靜態資源管理機制</h1><p>當客戶端對本網站某 URI 請求靜態資源，Spring Boot 會依順序尋找</p><ul><li>classpath:&#x2F;META-INF&#x2F;resources&#x2F; (須手動建立)</li><li>classpath:&#x2F;resources&#x2F;</li><li>classpath:&#x2F;static&#x2F;</li><li>classpath:&#x2F;public&#x2F; (須手動建立)</li></ul><p>找到 → 回應；找不到 → 下⼀個目錄</p><p>Spring Boot 預設首頁檔名是 index.xml，會依照順序在靜態資源目錄尋找。<br>若想要自訂則需要使用 Spring MVC 組態設定。</p><h1 id="Auto-Configuration"><a href="#Auto-Configuration" class="headerlink" title="Auto Configuration"></a>Auto Configuration</h1><ul><li>所有的組態設定預設都在 spring-boot-autoconfigure-x.y.z.jar</li><li>開發者透過 starter 決定使用哪些預設</li></ul><p>舉例常用的 2 個 :<br>spring-boot-starter-data-jpa</p><ul><li>託管 DataSource(連線自行決定)</li><li>託管 TransactionManager(啟用交易控制)</li><li>底層為 Hibernate</li></ul><p>spring-boot-starter-web</p><ul><li>託管 ViewResolver</li><li>設定靜態資源管理</li><li>託管 MessageConverter</li><li>設定預設⾸⾴</li></ul><h2>核心組態檔</h2><blockquote><p>只有當預設值不合用，或是無預設值時才會再次設定</p></blockquote><p>支援 2 種格式，分別為常數檔 properties(default)以及 yml。<br>路徑為 src&#x2F;main&#x2F;resources(預設)，檔名為 application.properties&#x2F;application.yml<br>組態內容 : 屬性名均為小寫，且使用 Spring Tools 4 會有提示字。<br>若 2 者皆存在，以 properties 優先。</p><h2>YAML</h2><ul><li>YAML Ain’t Markup Language(YAML 不是⼀種標記語⾔)</li><li>⼀種易讀易寫的資料格式，其格式中的空⽩、縮排、換行，有特殊意義</li><li>副檔名可為 yaml yml</li></ul><p>語法為 key : value，如換行再縮排，表示此屬性在前⼀個未縮排的屬性之命名空間下。<br>值的語法 :</p><ul><li>字面常數(Literal)</li><li>物件(Key Value pair)</li><li>陣列</li></ul><figure class="highlight java"><figcaption><span>Properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># properties</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/JAVA_FRAMEWORK</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=password</span><br><span class="line">server.port=<span class="number">8080</span></span><br><span class="line">server.servlet.context-path=/springboot-exercise</span><br></pre></td></tr></table></figure><blockquote><p>yml 冒號後面要空白</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/JAVA_FRAMEWORK</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">        <span class="attr">context-path:</span> <span class="string">/springboot-exercise</span></span><br></pre></td></tr></table></figure><blockquote><p>常用組態詳見講義</p></blockquote><h1 id="內嵌-application-web-server"><a href="#內嵌-application-web-server" class="headerlink" title="內嵌 application web server"></a>內嵌 application web server</h1><p>共支援 3 種內嵌伺服器<br>Tomcat、Jetty、Underrtow</p><p>Spring Boot 的內嵌式 Web 伺服器是預設啟動的，所以如果要丟到外部 Web 伺服器，需要在 pom.xml 設定排除 Tomcat 啟動器，不然會發生端口(port)衝突。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什麼是-Spring-Boot&quot;&gt;&lt;a href=&quot;#什麼是-Spring-Boot&quot; class=&quot;headerlink&quot; title=&quot;什麼是 Spring Boot ?&quot;&gt;&lt;/a&gt;什麼是 Spring Boot ?&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;大</summary>
      
    
    
    
    <category term="技術" scheme="https://example.com/categories/%E6%8A%80%E8%A1%93/"/>
    
    
    <category term="Java" scheme="https://example.com/tags/Java/"/>
    
    <category term="框架" scheme="https://example.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringBoot" scheme="https://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>基礎面試題</title>
    <link href="https://example.com/2023/02/15/%E5%9F%BA%E7%A4%8E%E9%9D%A2%E8%A9%A6%E9%A1%8C/"/>
    <id>https://example.com/2023/02/15/%E5%9F%BA%E7%A4%8E%E9%9D%A2%E8%A9%A6%E9%A1%8C/</id>
    <published>2023-02-15T10:37:17.000Z</published>
    <updated>2023-03-01T03:42:57.653Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基本型別記得看一下。。。太自信臨場忘記哭阿<br>物件導向三特性基本題</p></blockquote><h1 id="封裝、繼承、多型"><a href="#封裝、繼承、多型" class="headerlink" title="封裝、繼承、多型"></a>封裝、繼承、多型</h1><p>封裝 : 存取權限分為 private, default, protected 與 public，將屬性和方法包裝成類別方便外界對其存取，使用 scope 修飾子來提升安全性。<br>繼承 : 主要目的就是提高程式的重複使用性，子類別將會繼承到父類別中所有可以存取的成員，包括變數與方法。子類別可以加入新方法或是 override 父類別方法。<br>多形 : 使用同一個操作介面操作不同物件實例。</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>泛型提供我們在使用集合時編譯時期的安全檢查，可預先指定集合裡能存放的物件類型，&lt;&gt;內只能放參考型別(類別,陣列,介面),所以要放基本型別要放包裝後的(對應的包裝類別)。</p><h1 id="StringBuffer-與-StringBuilder"><a href="#StringBuffer-與-StringBuilder" class="headerlink" title="StringBuffer 與 StringBuilder"></a>StringBuffer 與 StringBuilder</h1><p>String 類別不可以在原來的記憶體改變內容，已經產生的字串會丟到 String pool 等待下次需要時叫出。<br>StringBuffer 類別則可以在原字串所在記憶體改變字串內容，包含 append, insert, delete, replace。</p><blockquote><p>StringBuffer 字串與 String 字串不可以比較 (沒有意義)，如要比較要用同類別才有意義，如真的要比較可以使用 StringBuffer 的 toString 方法</p></blockquote><p>StringBuilder 類別是 JDK 5 的新類別，其用法與 StringBuffer 類別完全一樣(append, insert, delete,<br>replace)</p><p>但是!<br>舊類別 StringBuffer 是 thread-safe(執行續安全)，新類別 StringBuilder 則是 non-thread-safe</p><blockquote><p>如果不考慮多執行緒的問題就可以使用 StringBuilder 來提升執行的效率</p></blockquote><p>常見於結合 BufferedReader 的 readLine()方法進行文字串接，對執行資源損耗減輕不小。</p><h1 id="甚麼是執行緒安全"><a href="#甚麼是執行緒安全" class="headerlink" title="甚麼是執行緒安全"></a>甚麼是執行緒安全</h1><blockquote><p>三個指標 原子性 有序性 可見性</p></blockquote><blockquote><p>當「一個」類別在被「多個」執行緒存取的情況下，仍能「正確」運作，就是執行緒安全</p></blockquote><ul><li>如果類別是 Stateless，它就是執行緒安全，因為「沒」有「共享」 的「狀態」 可以被修改。</li><li>如果類別是 Immutable，它就是執行緒安全，因為沒有「可」修改的「狀態」。</li><li>如果類別方法在操作狀態時不具備原子性(Atomicity)，它就不是執行緒安全，會因為各種不同的時間差造成 race condition。</li></ul><p>例如書上最常見的 count++，其實是 read-modify-write 3 個操作，如果兩個執行緒剛好一前一後讀到同一個值，那就會有一個 modify 的結果消失了(lost update)。</p><p>如何讓它 Atomic?</p><ul><li>synchronized</li><li>java.util.concurrent.Lock</li><li>CAS (Compare-and-Swap)<br>(e.g. AtomicInteger 的 compareAndSet)</li></ul><blockquote><p>感謝爪哇群 GC 大大的總結真是太精闢了 QQ</p></blockquote><h1 id="final-與-finally-與-finalize"><a href="#final-與-finally-與-finalize" class="headerlink" title="final 與 finally 與 finalize"></a>final 與 finally 與 finalize</h1><p>final 為 Java 一關鍵字。</p><ul><li>若一個變數被宣告為 final，表示此變數在初始化過後不得再變更，也就是常數。</li><li>若一個方法被宣告為 final，表示不能被 override</li><li>若一個類別被宣告為 final，表示不能被繼承(絕子絕孫)</li><li>若一個物件參考變數被宣告為 final，表示初始化後不能再指向另一個物件(更換門牌)</li></ul><p>finally 為 Java 一關鍵字。</p><ul><li>是無論發生什麼情況皆會執行的程式區塊</li><li>置於所有 catch { }的後面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(getInt());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getInt</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>猜猜會印出甚麼?<br>答案是 3!!!<br>不管有沒有異常，finally block 中都會被執行，其包含在 try catch 中有 return 的狀況。</p><p>try 語句在 return 前，執行完其他的操作，保留好 return 值，之後進入 finally block 時有幾種狀況 :</p><ul><li>如果 finally block 有 return 語句，會將前面保留的 return 語句覆蓋，如此無法得到在之前保留好的 return 語句。</li><li>如果 finally block 沒有 return 語句，也沒有要改變 return 值，順序為執行完 finally 中的事情，再 return try 中保留的值。</li></ul><p>詳見 <a href="https://itimetraveler.github.io/2017/09/20/%E3%80%90Java%E3%80%91try-catch-finally%E8%AF%AD%E5%8F%A5%E4%B8%ADreturn%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E6%80%9D%E8%80%83/">https://itimetraveler.github.io/2017/09/20/%E3%80%90Java%E3%80%91try-catch-finally%E8%AF%AD%E5%8F%A5%E4%B8%ADreturn%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E6%80%9D%E8%80%83/</a></p><blockquote><p>被考到了哭阿，但通常不會寫這種為了考而考的題目</p></blockquote><p>(少考)<br>finalize 類似於解構函式，我們不能強制垃圾收集器(GC)執行和銷燬物件，但可以使用此方法，只能被呼叫一次。<br>Java 執行時環境 (JRE) 會呼叫 finalize() 方法來關閉連線，例如網路和資料庫連線。</p><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><ul><li>實體變數和方法若是宣告為 static，則此變數和方法即成為類別變數(或稱靜態變數)和類別方法(或稱靜態方法)</li><li>宣告為 static 的變數和方法，是屬於此類別所有物件共用的</li><li>static 會在.class 檔載入時，將所有 static 的方法或變數載入 global 記憶體</li><li>static 方法不能被複寫(建構子也不行)，但子類別可以直接呼叫父類別方法使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Dad</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">earnMoney</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.earnMoney();</span><br><span class="line">System.out.println(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Son.money();  <span class="comment">//money 為父類別靜態方法</span></span><br><span class="line"><span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">son.earnMoney();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="x3D-x3D-與-equals"><a href="#x3D-x3D-與-equals" class="headerlink" title="&#x3D;&#x3D; 與 .equals"></a>&#x3D;&#x3D; 與 .equals</h1><p>&#x3D;&#x3D; 是比較<b>記憶體位址</b>而不是內容，如果要比較字串內容要使用 String 物件提供的.equals()作比較</p><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>主要分為 List 和 Set。(還有 Queue)</p><p>Queue 類似生活中的隊伍，有順序性，但只能對第一個元素做取出，取出即移除。適合資料消化操作。</p><h2>LinkedList與ArrayList差別</h2><ul><li><p>ArrayList 為連續的線性空間。<br>優點是<b>用索引值的存取表現佳</b>，但缺點為<b>不適合對裡面元素做插入或移除</p></b></li><li><p>LinkedList 為鏈結的資料結構，非常適合對頭&#x2F;尾元素進行處理。<br>優點是<b>適合對元素常常插入或移除</b>，但缺點為<b>用索引值的存取表現較差</b></p></li></ul><blockquote><p>如果要對自定義物件做大小排序請實作 Comparable 介面</p></blockquote><h1 id="Overload-和-Override"><a href="#Overload-和-Override" class="headerlink" title="Overload 和 Override"></a>Overload 和 Override</h1><h2>Overloading</h2><ul><li>Overloading 讓我們可以用統一的方法名稱來呼叫相同功能的方法，Java 會自動依據參數的數目及不同的資料型別，自動呼叫對應的方法</li><li>無法根據回傳值型態的不同而區別</li></ul><h2>Override</h2><ul><li>子類別繼承父類別後，不滿意父類別定義的方法，子類別可以在繼承後重新改寫，即為 override</li><li>方法名稱、參數個數、參數型別與回傳值皆須跟父類別裡被覆寫的方法相同</li><li>JDK 1.5 開始，如回傳型態是類別，則可以是原方法回傳值型別的子類別</li><li>存取修飾子的等級不可以小於原方法</li><li>一方法在父類別被宣告為 final 或是 static 不可以被 override</li></ul><h1 id="JDK、JRE、JVM"><a href="#JDK、JRE、JVM" class="headerlink" title="JDK、JRE、JVM"></a>JDK、JRE、JVM</h1><p>簡單來說，JDK 包含 JRE，JRE 包含 JVM。</p><p>JVM 為 Java 虛擬機器，簡單來說是運行 Java 程式的地方，因為不同系統只要安裝 JVM 即可運行而讓 Java 實現跨平台。<br>JRE 為 Java 運行環境，包含 JVM、以及 Java 類別函式庫等。但不包含開發工具。<br>JDK 為齊全的 Java 開發工具包，包含 JRE 以及編譯器和指令(javac javadoc 等)</p><blockquote><p>沒看到但寫一下</p></blockquote><h1 id="abstract-與-interface"><a href="#abstract-與-interface" class="headerlink" title="abstract 與 interface"></a>abstract 與 interface</h1><ul><li><p>介面為定義規格用。<br>透過 implements 來實作介面。<br>Java8 以前，interface 所有方法皆為抽象方法。Java8 以後可以默認實作(default)。<br>在 interface 中宣告之變數皆為 public static final。<br>方法則是 public abstract。(沒有 static，因為要給人家用)<br>可以利用 interface 達成多重繼承的模式。(因為 Java 不支援多重繼承)</p></li><li><p>抽象方法沒有方法主體，且必須加上 abstract 修飾子。<br>透過繼承來建立延伸子類別。一類別成為抽象類別就不可以產生實體(new sth)。<br>abstract 類別內可以存在非抽象方法。抽象類別不一定要有抽象方法，但具有抽象方法的類別，一定要宣告為抽象類別。<br>抽象類別作為父類別也可以拿來宣告新的物件(但 new 的新物件是非 abstract 的 subclass)。</p></li></ul><blockquote><p>不要濫用繼承</p></blockquote><h1 id="例外處理"><a href="#例外處理" class="headerlink" title="例外處理"></a>例外處理</h1><p>CheckedException 和 RuntimeException</p><p>CheckedException : 一定要處理。</p><h1 id="相較於程序性程式語言，物件導向程式語言的優勢是什麼"><a href="#相較於程序性程式語言，物件導向程式語言的優勢是什麼" class="headerlink" title="相較於程序性程式語言，物件導向程式語言的優勢是什麼?"></a>相較於程序性程式語言，物件導向程式語言的優勢是什麼?</h1><blockquote><p>簡答即為物件導向三大特性，有時會多聽到一種即為抽象</p></blockquote><ul><li><p>封裝性（Encapsulation）：<br>物件導向程式語言能夠將數據和相關的操作（方法）封裝在一個物件中，將其作為一個獨立的單元進行操作，將數據和操作與其他部分隔離開來，從而提高了代碼的可重用性和可維護性。</p></li><li><p>繼承性（Inheritance）：<br>繼承是物件導向程式設計的核心概念之一，可以使子類別繼承父類別的屬性和方法，並且可以在此基礎上進行擴展和重寫。這種機制可以提高代碼的可重用性和可擴展性，減少代碼的冗餘性。</p></li><li><p>多態性（Polymorphism）：<br>多態性是指對同一個消息的不同對象可以有不同的反應。物件導向程式語言通過多態性實現了代碼的靈活性和可擴展性，可以讓程序更加具有彈性和可讀性。</p></li><li><p>抽象性（Abstraction）：<br>抽象是物件導向程式設計的重要概念之一，它將對象的本質特徵抽象出來，形成一個抽象的類型。這種機制可以使代碼更加通用和具有可移植性，讓程序更加靈活和可擴展。</p></li></ul><p>總的來說，物件導向程式語言具有更好的可維護性、可重用性、可擴展性和靈活性，能夠讓程序員更加高效地開發複雜的應用程序。</p><h2>程序性程式語言的優勢</h2><ul><li>效率高 :<br>程序性程式語言通常更接近計算機硬件，能夠直接操作內存和 CPU 等硬件資源，因此其執行速度相對較快，適合用於需要高效處理大量數據和需要對系統資源進行直接控制的場景。</li><li>較好入門 :<br>因為不需要學習物件導向的概念，程式為依序執行。對初學者較友善</li></ul><blockquote><p>但學 C 語言的指標會讓你想哭</p></blockquote><h1 id="什麼是-ORM"><a href="#什麼是-ORM" class="headerlink" title="什麼是 ORM?"></a>什麼是 ORM?</h1><blockquote><p>Object Relational Mapping 物件關聯對應</p></blockquote><p>DB 和 Java 程式(或任一 OOP 程式語言)是 2 種不同的東西。<br>為了要實現在 2 者之間的轉換而有了這樣的技術。(可以想成在是可在程式中使用的虛擬資料庫)<br>在 Java 程式中，即是所謂 POJO(這裡指廣義 JAVA BEAN 或稱 VO)中的屬性對應欄位。<br>常見的 ORM 框架有 Hibernate、MyBatis、Spring Data JPA。<br>MyBatis 優勢為寫原生 SQL 比較方便。</p><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h1 id="inner、left、right-join-的差別"><a href="#inner、left、right-join-的差別" class="headerlink" title="inner、left、right join 的差別"></a>inner、left、right join 的差別</h1><blockquote><p>只要有 SQL 這題幾乎必考</p></blockquote><ul><li>inner join : 表格都有值的資料會顯示</li><li>Left join : 只顯示左邊表格有的值，右邊表格無此值者會顯⽰ null</li><li>right join : 只顯示右邊表格有的值，左邊表格無此值者會顯⽰ null</li></ul><blockquote><p>還有 2 種知道”可能”會加分吧(?)</p></blockquote><ul><li>full join : 將合併表格的所有欄位都顯示出來</li><li>cross join : 交叉合併查詢(Cross Join )是關聯式代數的卡迪生乘績運算，查詢結果的紀錄是 2 個資料表紀錄的乘積。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">From</span> 表A <span class="keyword">Cross</span> <span class="keyword">Join</span> 表B;</span><br></pre></td></tr></table></figure><blockquote><p>表 A 有 5 筆紀錄，表 B 有 8 筆紀錄，交查合併後會得到 5 * 8&#x3D;40 筆的紀錄，如果沒有指名欄位，欄位數就是 2 個資料表的欄位總數。</p></blockquote><h1 id="order-by-要會寫"><a href="#order-by-要會寫" class="headerlink" title="order by 要會寫"></a>order by 要會寫</h1><h1 id="前端和後端是什麼"><a href="#前端和後端是什麼" class="headerlink" title="前端和後端是什麼?"></a>前端和後端是什麼?</h1><blockquote><p>懷疑我被刁難 QQ</p></blockquote><p>前端：指與用戶直接互動的界面，主要由 HTML、CSS 和 JavaScript 等技術構建。前端開發人員負責設計和實現這些界面，使其具有良好的用戶體驗。</p><p>後端：指在服務器端處理客戶端請求和業務邏輯的部分，通常由一些特定的程式語言、框架和庫實現。後端開發人員負責編寫和維護這些程式，保證其能夠有效地處理請求，並返回正確的結果。</p><h1 id="JSP-是前端還是後端-為什麼"><a href="#JSP-是前端還是後端-為什麼" class="headerlink" title="JSP 是前端還是後端? 為什麼"></a>JSP 是前端還是後端? 為什麼</h1><p>JSP（JavaServer Pages）是一個基於 Java 技術的伺服器端腳本語言，用於動態網頁開發。因此，JSP 被歸類為後端技術，用於網頁後端的程式邏輯處理。</p><p>JSP 的基本思想是在一個 HTML 文件中嵌入 Java 代碼，這些代碼通過伺服器端運行並生成 HTML 文件返回給客戶端。JSP 可以通過標籤庫和自定義標籤來實現對動態網頁的設計和渲染，同時也支持多種資料庫操作。</p><p>總之，JSP 處理的是網頁的後端業務邏輯，它將伺服器端的資料轉換為 HTML，再返回給客戶端展示，所以 JSP 屬於後端技術。</p><h1 id="甚麼是-Multipart"><a href="#甚麼是-Multipart" class="headerlink" title="甚麼是 Multipart?"></a>甚麼是 Multipart?</h1><blockquote><p>這題是松凌考的</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;基本型別記得看一下。。。太自信臨場忘記哭阿&lt;br&gt;物件導向三特性基本題&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;封裝、繼承、多型&quot;&gt;&lt;a href=&quot;#封裝、繼承、多型&quot; class=&quot;headerlink&quot; title=&quot;封裝、繼承、</summary>
      
    
    
    
    <category term="面試" scheme="https://example.com/categories/%E9%9D%A2%E8%A9%A6/"/>
    
    
    <category term="Java" scheme="https://example.com/tags/Java/"/>
    
    <category term="面試" scheme="https://example.com/tags/%E9%9D%A2%E8%A9%A6/"/>
    
    <category term="基礎" scheme="https://example.com/tags/%E5%9F%BA%E7%A4%8E/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC</title>
    <link href="https://example.com/2023/02/14/Spring-MVC/"/>
    <id>https://example.com/2023/02/14/Spring-MVC/</id>
    <published>2023-02-14T09:10:17.000Z</published>
    <updated>2023-02-20T11:13:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>溫馨提示 : 本 blog 皆使用專案管理工具 Maven，其相關依賴要自己去<a href="https://mvnrepository.com/">https://mvnrepository.com/</a> 複製唷!</p><blockquote><p>What is Spring MVC?</p></blockquote><p>為 Spring framework 中的一個模組(webmvc)，設計模式上為前置控制器模式(Front Controller Pattern)。<br>在 Spring MVC 中，前置控制器稱為 DispatcherServlet，底層依然依靠 Servlet API 運作。</p><p>使用概念 :</p><ul><li>使用 Spring MVC 提供之 API Controller 來撰寫控制器(Controller)</li><li>其也提供了 Model，View 等 API</li><li>一樣使用 IoC&#x2F;DI 將 Controller 託管至 IoC 容器</li><li>DispatcherServlet 收到請求(Request)，會控制交由指定控制器做處理</li></ul><h1 id="Front-Controller-Pattern"><a href="#Front-Controller-Pattern" class="headerlink" title="Front Controller Pattern"></a>Front Controller Pattern</h1><ul><li>Design Pattern 中，針對 MVC 架構提出的模式</li><li>所有請求集中給 Front Controller 接收，再經由⼀個分派器(Dispatcher)，將請求分派給對應的控制器處理</li><li>處理完後回到前置控制器，再由前置控制器取得 View</li><li>最後由前置控制器做出回應(Response)</li></ul><h1 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h1><ul><li>將前置控制器與分派器合而為一，型態為 DispatcherServlet</li><li>為 Servlet API 之類別 HttpServlet 之子代類別</li><li>在⼀般使⽤情況下，不會直接使⽤到 DispatcherServlet 物件，而是透過 web.xml 註冊</li><li>Spring MVC 中唯一的 Servlet</li></ul><h1 id="MVC-架構"><a href="#MVC-架構" class="headerlink" title="MVC 架構"></a>MVC 架構</h1><blockquote><p>Spring MVC 的 MVC 架構，是以 DispatcherServlet 為中⼼設計，再配合其他重要物件來完成請求回應</p></blockquote><ul><li>HandlerMapping : 網址與控制器的映射表</li><li>Controller : 控制器，即 Spring MVC 中的控制器 類別&#x2F;⽅法</li><li>Model : 在此僅指 Model 層運算完的結果</li><li>ViewResolver : View 解析器，可將 View 的邏輯名稱解析成真實的 View</li><li>View : 真實的 View，EX. JSP 檔</li></ul><h1 id="註冊-DispatcherServlet"><a href="#註冊-DispatcherServlet" class="headerlink" title="註冊 DispatcherServlet"></a>註冊 DispatcherServlet</h1><blockquote><p>⼀般會將 DispatcherServlet 設定映射網站根路徑”&#x2F;“，即對此網站的所有請求，皆會經過 DispatcherServlet</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">..略</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">org.springframework.web.context.support.AnnotationConfigWebApplicationContext</span><br><span class="line"><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>core.config.MvcConfig<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>同時註冊核心組態類別</p></blockquote><p>除了加上@Configuration 以外，需要實作 WebMvcConfiguer 介面<br>以及做驅動設定@EnableWebMvc，還需要加上@ComponentScan 將 Controller 做掃描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;web.*.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="託管-ViewResolver-元件與靜態資源管理"><a href="#託管-ViewResolver-元件與靜態資源管理" class="headerlink" title="託管 ViewResolver 元件與靜態資源管理"></a>託管 ViewResolver 元件與靜態資源管理</h1><h2>託管 ViewResolver </h2><blockquote><p>需要 override configureViewResolvers()，實作並且設定</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;web.*.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">  <span class="type">InternalResourceViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternalResourceViewResolver</span>();</span><br><span class="line">  viewResolver.setPrefix(<span class="string">&quot;/WEB-INF/&quot;</span>);</span><br><span class="line">  viewResolver.setSuffix(<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">  viewResolver.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">  registry.viewResolver(viewResolver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>靜態資源管理</h2><blockquote><p>需要針對靜態資源處理(DefaultServlet)以及重新映射靜態資源</p></blockquote><p>靜態資源處理(DefaultServlet) : 覆寫 configureDefaultServletHandling()</p><p>重新映射靜態資源 : 覆寫 addResourceHandlers()<br>(可隱藏真實路徑)<br>在 MvcConfig 類別中 override configureDefaultServletHandling()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">configurer.enable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">registry.addResourceHandler(<span class="string">&quot;/**&quot;</span>).addResourceLocations(<span class="string">&quot;/WEB-INF/&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果有一靜態資源 &#x2F;WEB-INF&#x2F;index.html，會被重新映射至&#x2F;index.html</p></blockquote><h1 id="Model-支援"><a href="#Model-支援" class="headerlink" title="Model 支援"></a>Model 支援</h1><ul><li>Spring MVC 實作 MVC 概念，其支援了 Model(指 Model 層運算完之結果)</li><li>提供 Model 相關 API，做資料綁定(Data Binding)，其資料即為 Servlet API 中的屬性物件(Attribute Object)</li><li>取代 Servlet API 中，scope object 寫法<br>像是 request.setAttribute、request.getAttribute</li></ul><blockquote><p>大部分 MVC &#x2F; MVVM 框架，對 Model 支援僅有資料綁定</p></blockquote><p>使用@ModelAttribute(“識別名”)來綁定屬性物件</p><ul><li>⽤在⽅法 : 綁定⽅法的回傳值。執⾏控制器⽅法前，會先執⾏此⽅法</li><li>⽤在控制器⽅法的參數 : 綁定請求參數</li></ul><blockquote><p>每次對 member&#x2F;useModelAttribute1 發出請求，會先呼叫 memberList()，並綁定此⽅法的回傳值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;member&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberController</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> MemberService service;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(&quot;useModelAttribute1&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">useModelAttribute1</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;member/manage&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@ModelAttribute(&quot;memberList&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> List&lt;Member&gt; <span class="title function_">memberList</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> service.findAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>請求參數會⾃動封裝⾄ member 中，加上@ModelAttribute 會再將其綁定</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;member&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberController</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> MemberService service;</span><br><span class="line">  <span class="meta">@GetMapping(&quot;useModelAttribute2&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">useModelAttribute2</span><span class="params">(<span class="meta">@ModelAttribute(&quot;member&quot;)</span> Member member)</span> &#123;</span><br><span class="line">  <span class="comment">// 略..</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;member/result&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Session-scope"><a href="#Session-scope" class="headerlink" title="Session scope"></a>Session scope</h1><blockquote><p>如要綁定範圍物件，需先使用@ModelAttribute 綁定屬性物件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;member&quot;)</span></span><br><span class="line"><span class="meta">@SessionAttributes(&#123; &quot;member&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberController</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> MemberService service;</span><br><span class="line">  <span class="meta">@PostMapping(&quot;login&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(Member member)</span> &#123;</span><br><span class="line">  service.login(member);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;redirect:/result.jsp&quot;</span>;  <span class="comment">//重新導向</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@ModelAttribute(&quot;member&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Member <span class="title function_">member</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>為了取得 Session 範圍物件，使用@SessionAttribute(“識別名”)<br>**只能取得</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;member&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberController</span> &#123;</span><br><span class="line">  <span class="meta">@GetMapping(&quot;getInfo&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">(<span class="meta">@SessionAttribute(&quot;member&quot;)</span> Member member)</span> &#123;</span><br><span class="line">  <span class="comment">// 略..</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;member/edit&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>RedirectAttributes</h2><ul><li><b>Model 的⼦型態</b>，用來綁定暫存(Flash)屬性物件</li><li>Redirect 時可以共享屬性物件</li><li>接收到屬性物件後，自動取消綁定</li><li>Jsp 無法使用</li><li>傳送端與接收端 :<ul><li>addFlashAttribute(“識別名”)</li><li>@ModelAttribute(“識別名”)</li></ul></li><li>若接收端要再往下共享，則可接著使⽤ Model 物件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">  <span class="meta">@GetMapping(&quot;deliverer&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">deliverer</span><span class="params">(RedirectAttributes redirectAttributes)</span> &#123;</span><br><span class="line">  redirectAttributes.addFlashAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;William&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;redirect:/recipient&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@GetMapping(&quot;recipient&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">recipient</span><span class="params">(<span class="meta">@ModelAttribute(&quot;name&quot;)</span> String name, Model model)</span> &#123;</span><br><span class="line">  model.addAttribute(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;some_page&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>若想要綁定屬性物件至 Context Scope，可以直接使用 Servlet API 中的 ServletContext 物件，透過@Autowired 注⼊，即可取得 ServletContext 物件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line">  <span class="comment">// 略..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ViewResolver"><a href="#ViewResolver" class="headerlink" title="ViewResolver"></a>ViewResolver</h1><ul><li>ViewResolver 為 Spring MVC 重要物件，為 View 的解析器</li><li>將控制器回傳的 View 的邏輯名稱 解析成 真實的 View</li><li>真實的 View，包含網址中的路徑、檔名，及其他細節設定</li><li>Spring MVC 架構中，⾄少要有⼀個 ViewResolver</li><li>共同⽗型態為 ViewResolver</li></ul><h2>InternalResourceViewResolver</h2><ul><li>未託管任何 View 解析器時，預設的 View 解析器</li><li>配合 InternalResourceView 使⽤，即 View 為 Servlet 或 JSP 或 HTML</li><li>將控制器回傳的 View 邏輯名稱，加上 前綴字&#x2F;後綴字<ul><li>setPrefix(“前綴字”) : 設定 View 名稱的前綴字</li><li>setSuffix(“後綴字”) : 設定 View 名稱的後綴字</li><li>setContentType(“MIME Type”) :設定 View 內容的 MIME 　 Type，亦可同時設定⽂字編碼</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;web.*.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">  <span class="type">InternalResourceViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternalResourceViewResolver</span>();</span><br><span class="line">  viewResolver.setPrefix(<span class="string">&quot;/WEB-INF/&quot;</span>);</span><br><span class="line">  viewResolver.setSuffix(<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">  viewResolver.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">  registry.viewResolver(viewResolver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>若控制器回傳邏輯名稱”member&#x2F;result”，則會解析出的真實名稱為”&#x2F;WEB-INF&#x2F;member&#x2F;result.jsp”</p></blockquote><h2>ContentNegotiatingViewResolver</h2><ul><li>Spring MVC 架構中，可同時有多個 View 解析器，用以對應多種 View 格式</li><li>所以需要 ContentNegotiatingViewResolver 來管理多個 View 解析器</li><li>解析方式是依照請求標頭(Request Header)中的 Accept 屬性之值，選擇對應的 View 解析器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定義JSON格式的View解析器類別</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonViewResolver</span> <span class="keyword">implements</span> <span class="title class_">ViewResolver</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> View <span class="title function_">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> &#123;</span><br><span class="line">  <span class="type">MappingJackson2JsonView</span> <span class="variable">view</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2JsonView</span>();</span><br><span class="line">  view.setPrettyPrint(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> view;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;web.*.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"><span class="comment">// 略..</span></span><br><span class="line"><span class="comment">// 託管JSP格式專用View解析器</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> ViewResolver <span class="title function_">jspViewResolver</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">InternalResourceViewResolver</span> <span class="variable">internalResourceViewResolver</span></span><br><span class="line">  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternalResourceViewResolver</span>();</span><br><span class="line">  internalResourceViewResolver.setPrefix(<span class="string">&quot;/WEB-INF/&quot;</span>);</span><br><span class="line">  internalResourceViewResolver.setSuffix(<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> internalResourceViewResolver;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 託管JSON格式專用View解析器</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> ViewResolver <span class="title function_">jsonViewResolver</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonViewResolver</span>();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 託管管理多個View解析器的ContentNegotiatingViewResolver元件</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> ViewResolver <span class="title function_">contentNegotiatingViewResolver</span><span class="params">(ContentNegotiationManager manager)</span> &#123;</span><br><span class="line">  <span class="type">ContentNegotiatingViewResolver</span> <span class="variable">cnvr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentNegotiatingViewResolver</span>();</span><br><span class="line">  cnvr.setContentNegotiationManager(manager);</span><br><span class="line"><span class="comment">// 設定欲管理的View解析器</span></span><br><span class="line">  cnvr.setViewResolvers(Arrays.asList(jspViewResolver(), jsonViewResolver()));</span><br><span class="line">  <span class="keyword">return</span> cnvr;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 設定ContentNegotiatingViewResolver</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> &#123;</span><br><span class="line">  configurer.defaultContentType(MediaType.TEXT_HTML);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>RedirectView</h2><ul><li>不會經過 View 解析器的解析，所以內含的 View 名稱應為真實名稱</li><li>僅表⽰要重新導向，View 名稱可以是任何資源</li><li>View 名稱不能包含”WEB-INF”</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;member&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberController</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> MemberService service;</span><br><span class="line">  <span class="meta">@PostMapping(&quot;login&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> View <span class="title function_">login</span><span class="params">(Member member)</span> &#123;</span><br><span class="line">  service.login(member);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedirectView</span>(<span class="string">&quot;../index.html&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>跳脫ViewResolver</h2> <ul><li>在某些情況下，確實會希望能不經過View解析器，意即跳脫View解析器</li><li>託管了InternalResourceViewResolver，固定會替View名稱..<ul><li>前⾯加上”&#x2F;WEB-INF&#x2F;“；後⾯加上”.jsp”</li><li>但想轉發(forward&#x2F;redirect)⾄”index.html”</li></ul></li><li>除了使⽤RedirectView之外，Spring MVC另提供特殊前綴字，⽤以跳脫(不能包含”WEB-INF”)</li></ul><p>特殊前綴字 :</p><ul><li>定義在 UrlBasedViewResolver 型態</li><li>FORWARD_URL_PREFIX : 值為”forward:”</li><li>REDIRECT_URL_PREFIX : 值為”redirect:”</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;member&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberController</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> MemberService service;</span><br><span class="line">  <span class="meta">@GetMapping(&quot;login&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(Member member)</span> &#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> service.login(member);</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect: ../index.html&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward: login.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-於-JSTL-支援"><a href="#Spring-於-JSTL-支援" class="headerlink" title="Spring 於 JSTL 支援"></a>Spring 於 JSTL 支援</h1><ul><li>有定義自己的 JSTL(Jsp Standard Tag Library)</li><li>JSP 這種伺服器端渲染(Server Side Render)技術，會造成伺服器負荷過高</li><li>現今則多採⽤客⼾端渲染(Client Side Render)技術，由客⼾端分擔負荷</li></ul><blockquote><p>現今有更好的選擇 – 前端框架</p></blockquote><p>詳情請看講義。</p><h1 id="欄位檢核"><a href="#欄位檢核" class="headerlink" title="欄位檢核"></a>欄位檢核</h1><ul><li>實作 View 層時，常需處理欄位檢核</li><li>欄位需符合當下定義的檢核條件，才會接續下⼀步動作</li><li>實作可使⽤ Hibernate Validator</li><li>另搭配 spring-form 標籤庫及 BindingResult 請看講義</li></ul><p>@NotNull</p><ul><li>不可為 null</li></ul><p>@NotBlank</p><ul><li>不可為 null&#x2F;空字串</li><li>只能⽤在 CharSequence 型態</li></ul><p>@NotEmpty</p><ul><li>不可為 null&#x2F;空</li><li>可⽤在 CharSequence、Array、Collection、Map 等型態</li></ul><p>@Size(min &#x3D; 長度下限, max &#x3D; 長度上限)</p><ul><li>元素個數上下限</li><li>可⽤在 CharSequence、Array、Collection、Map 等型態</li><li>⽤在 CharSequence 表⽰字元個數的上下限</li></ul><p>@Pattern(regexp &#x3D; “表示式”)</p><ul><li>正規表⽰式(Regular Expression)</li></ul><p>@Email</p><ul><li>信箱格式</li></ul><p>@Digital(integer &#x3D; 整數位數, fraction &#x3D; 小數位數)</p><ul><li>位數個數</li></ul><p>@Max(最大值)、@Min(最小值)</p><ul><li>上&#x2F;下 限</li></ul><p>@Positive、@Negative</p><ul><li>正&#x2F;負 數</li></ul><p>@PositiveOrZero、@NegativeOrZero</p><ul><li>正或零&#x2F;負或零</li></ul><p>@DateTimeFormat(pattern &#x3D; “格式”)</p><ul><li>⽇期時間格式</li><li>由 Spring 提供</li><li>EX.@DateTimeFormat(pattern &#x3D; “yyyy-MM-dd”)</li></ul><p>@Past</p><ul><li>過去的⽇期時間</li></ul><p>@PastOrPresent</p><ul><li>過去&#x2F;當下 的⽇期時間</li></ul><h1 id="在-Spring-MVC-中使用檔案傳輸"><a href="#在-Spring-MVC-中使用檔案傳輸" class="headerlink" title="在 Spring MVC 中使用檔案傳輸"></a>在 Spring MVC 中使用檔案傳輸</h1><p>檔案可以放在</p><ul><li>資料庫端 : BLOB</li><li>applocation sever 端 EX. Tomcat 根⽬錄&#x2F;files 可⽤以下⽅式取得 Tomcat 根⽬錄之路徑</li></ul><p>以 Java based 為例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;catalina.home&#x27;]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String tomcatRootPath;</span><br></pre></td></tr></table></figure><p>在 web.xml 加上設定啟用檔案上傳功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">略..</span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">multipart-config</span> /&gt;</span>  <span class="comment">&lt;!-- this --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>並在 pom.xml 中加入依賴 Apache Commons FileUpload 支援</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>託管 CommonsMultipartResolver 元件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;web.*.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"><span class="comment">// 略..</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">commonsMultipartResolver</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">CommonsMultipartResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">  resolver.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">// 設定檔名文字編碼</span></span><br><span class="line">  resolver.setMaxUploadSizePerFile(<span class="number">500</span> * <span class="number">1024</span> * <span class="number">1024</span>); <span class="comment">// 設定單檔大小上限</span></span><br><span class="line">  esolver.setMaxUploadSize(<span class="number">4</span> * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>); <span class="comment">// 設定總大小上限</span></span><br><span class="line">  <span class="keyword">return</span> resolver;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>檔案上傳</h2><p>控制器方法 :</p><ul><li>接收檔案 : 參數加上@RequestParam，型態 MultipartFile[]</li><li>另存新檔 (非必要) : 呼叫 transferTo()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;img&quot;)</span> MultipartFile[] files)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line">file.transferTo(Paths.get(fileRootPath, file.getOriginalFilename()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>img 為請求參數的名稱，須對應前端(HTML&#x2F;JavaScript)中的名稱</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;file/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;img&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> multiple&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">for</span> (<span class="keyword">let</span> file <span class="keyword">of</span> input.<span class="property">files</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">formData.<span class="title function_">append</span>(<span class="string">&#x27;img&#x27;</span>, file, file.<span class="property">name</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">fetch</span>(<span class="string">&#x27;file/upload&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">body</span>: formData</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2>檔案下載</h2><ul><li>讓控制器⽅法回傳 byte[]</li><li>須設定 MIME TYPE<ul><li>@GetMapping(..,produces &#x3D; MediaType.檔案的 MIME TYPE)</li><li>@PostMapping(..,produces &#x3D; MediaType.檔案的 MIME TYPE)</li></ul></li><li>設定回傳值為是 HTTP 的回應本體(Response Body)<ul><li>@ResponseBody</li></ul></li></ul><blockquote><p>假設檔案放在 Tomcat 根⽬錄&#x2F;files</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;catalina.home&#x27;].concat(&#x27;/files/&#x27;)&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String fileRootPath;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(path = &quot;download&quot;, produces = MediaType.IMAGE_PNG_VALUE)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">byte</span>[] download() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="keyword">return</span> Files.readAllBytes(Paths.get(fileRootPath, <span class="string">&quot;polar-bears.jpg&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>跳出下載視窗</h2> <ul><li>若希望跳出下載視窗，則可將MIME Type設定成application&#x2F;octet-stream</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(</span></span><br><span class="line"><span class="meta">path = &quot;download&quot;,</span></span><br><span class="line"><span class="meta">produces = MediaType.APPLICATION_OCTET_STREAM_VALUE</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] download() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">return</span> Files.readAllBytes(Paths.get(fileRootPath, <span class="string">&quot;polar-bears.jpg&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外可以指定預設檔名，詳看講義</p><h1 id="Spring-MVC-的例外處理"><a href="#Spring-MVC-的例外處理" class="headerlink" title="Spring MVC 的例外處理"></a>Spring MVC 的例外處理</h1><ul><li>MVC 架構中，常將例外處理放在 Controller 層</li><li>其他層則是直接將例外拋出(throw)，⽽不可捕捉(catch)</li><li>Spring MVC 對此提供了⽀援，例外處理分成 類別範圍 跟 全域範圍</li><li>對此提供了 例外映射 View 的設定</li></ul><p>規則 :</p><ul><li>須加上 @ExceptionHandler(欲捕捉的例外型態.class)</li><li>可加⼊⼀個例外參數，型態為欲捕捉的例外型態</li></ul><h2>類別範圍的例外處理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(MemberController.class);</span><br><span class="line"><span class="comment">// 略..</span></span><br><span class="line">  <span class="meta">@ExceptionHandler(SQLException.class)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">handleSQLException</span><span class="params">(SQLException exception)</span> &#123;</span><br><span class="line">  logger.error(exception.getMessage(), exception);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>全域範圍例外處理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionAdvice</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(ExceptionAdvice.class);</span><br><span class="line">  <span class="meta">@ExceptionHandler(SQLException.class)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">handleSQLException</span><span class="params">(SQLException exception)</span> &#123;</span><br><span class="line">  logger.error(exception.getMessage(), exception);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h1><blockquote><p>大重點，我真滴不想再寫 JSP ㄌ</p></blockquote><p>在 RESTful API 有其精神，包含 4 個參數傳遞請求方法~</p><h2>前後端分離架構</h2><ul><li><p>方便抽換後端技術</p></li><li><p>web 前後端分離，必須使用 AJAX 或是前端框架技術(也是用 AJAX)</p></li><li><p>轉發(forward&#x2F;redirect)⾏為，已不符現今設計</p><ul><li><p>資源浪費：轉發和重定向都需要重新創建請求和響應，這樣會浪費伺服器資源和網絡帶寬。</p></li><li><p>速度緩慢：轉發和重定向需要多次網路往返，這會增加頁面加載時間和用戶等待時間。</p></li><li><p>SEO 不友好：搜索引擎爬取網頁時，通常只會解析一次 URL，如果網站使用了過多的轉發和重定向，搜索引擎可能會漏掉一些重要的內容，進而影響網站的 SEO。</p></li><li><p>難以維護：轉發和重定向會導致多個 URL 之間產生複雜的關係，這樣會增加代碼的複雜度和維護難度。</p></li></ul></li></ul><h2>Web API</h2><ul><li>僅以<b>回應本體(Response Body)</b>回傳資料，不轉發(forward&#x2F;redirect)</li><li>前端只需透過網址及相關參數(有時可能會加⼊驗證)，就可以跟後端交換資料<br>EX. 透過網址 <a href="http://william.idv.tw/member/getInfo">http://william.idv.tw/member/getInfo</a>…<ul><li>前端 : 傳”1”給後端</li><li>後端 : 回”1 ithan0117 William”(會員編號、使⽤者名稱、暱稱)給前端</li></ul></li><li>資料傳遞，現今流行使⽤ JSON 格式</li><li>業界常將 Web API 簡稱為 API</li></ul><h2>RESTful API</h2><ul><li>一種架構風格(符合 REST ⾵格)</li><li>操作同⼀個資源(Resource)，使⽤同⼀個網址(URI)</li><li>再以 HTTP 的請求⽅法(Request Method)，來決定進⾏何種操作</li><li>精神為使用請求方法要符合作的事情</li></ul><p>四個請求方法 :</p><ul><li>POST<ul><li>操作 : 新增</li><li>參數傳遞方式 : 使用請求本體(Request Body)</li><li>格式 : 現今流⾏使⽤ JSON 格式</li></ul></li><li>PUT<ul><li>操作 : 修改</li><li>參數傳遞方式 : 使用請求本體(Request Body)</li><li>格式 : 現今流⾏使⽤ JSON 格式</li></ul></li><li>DELETE<ul><li>操作 : 刪除</li><li>參數傳遞方式 : 使用路徑變數(Path Variable)</li><li>格式 : ⽤網址路徑當參數</li></ul></li><li>GET<ul><li>操作 : 查詢</li><li>參數傳遞方式 : 使用路徑變數(Path Variable)</li><li>格式 : ⽤網址路徑當參數</li></ul></li></ul><p>因為需要傳遞 JSON 資料需要做組態設定，Spring MVC 提供 MappingJackson2HttpMessageConverter 型態，此型態底層使用 JSON API 為 JACKSON</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>託管 MappingJackson2HttpMessageConverter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;web.*.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"><span class="comment">// 略..</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">  <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">  messageConverter.setPrettyPrint(<span class="literal">true</span>);</span><br><span class="line">  converters.add(messageConverter);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>對應各請求方法</p><ul><li>@PostMapping&#x2F;@DeleteMapping&#x2F;@PutMapping&#x2F;@GetMapping</li><li>可⽤@RequestMapping(method &#x3D; {方法 1,方法 2,…,方法 N})，對應多個請求⽅法</li></ul><p>參數傳遞</p><ul><li>路徑變數 : @PathVariable</li><li>請求本體 : @RequestBody</li></ul><p>回應本體</p><ul><li>@ResponseBody</li><li>控制器類別改加上@RestController，<b>則可省去@ResponseBody</b></li><li>可配合 POJO、List&lt;POJO&gt;、Map、void(無回應本體)、ResponseEntity 等型態</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;member&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberRestController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>member，前端統⼀使用此網址，操作會員資料</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增會員</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Core <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Member member)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> service.register(member);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 刪除會員</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Core <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> service.remove(id);</span><br><span class="line"><span class="type">Core</span> <span class="variable">core</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Core</span>();</span><br><span class="line">core.setSuccessful(result);</span><br><span class="line">core.setMessage(result ? <span class="string">&quot;刪除成功&quot;</span> : <span class="string">&quot;刪除失敗&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> core;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改會員</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Core <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Member member)</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> service.save(member);</span><br><span class="line"><span class="type">Core</span> <span class="variable">core</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Core</span>();</span><br><span class="line">core.setSuccessful(result);</span><br><span class="line">core.setMessage(result ? <span class="string">&quot;修改成功&quot;</span> : <span class="string">&quot;修改失敗&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> core;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查詢會員</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span> <span class="comment">//路徑變數，網址member/1， id值就會是1</span></span><br><span class="line"><span class="keyword">public</span> Member <span class="title function_">read</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dao.selectById(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查詢全部會員</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Member&gt; <span class="title function_">readAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dao.selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>RESTful 也有檔案傳輸，以及 JSON 格式屬性對應和日期時間格式化，處理跨域請求，詳見講義</p></blockquote><h1 id="處理-做掉-DispatcherServlet-自行定義部屬描述類別"><a href="#處理-做掉-DispatcherServlet-自行定義部屬描述類別" class="headerlink" title="處理(做掉) DispatcherServlet(自行定義部屬描述類別)"></a>處理(做掉) DispatcherServlet(自行定義部屬描述類別)</h1><ul><li>Servlet 3 後，web.xml 為非必要，可用 Java based 取代</li><li>Spring MVC 有支援，可在專案啟動時，就啟用 DispatcherServlet(不需要再設定 loadOnStartup)</li></ul><p>自行定義部屬描述類別 :</p><ul><li>需要繼承 AbstractAnnotationConfigDispatcherServletInitializer</li><li>覆寫 getRootConfigClasses() –指定 Spring 核⼼組態類別</li><li>覆寫 getServletConfigClasses() – 指定 Spring MVC 核⼼組態類別</li><li>覆寫 getServletMappings() – 設定 DispatcherServlet 映射路徑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppInitializer</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定 Spring 核⼼組態類別</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; AppConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定 Spring MVC 核⼼組態類</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; MvcConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//設定 DispatcherServlet 映射路徑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;/&quot;</span> &#125;;  <span class="comment">// &quot;/&quot;映射網站根路徑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>設定filter</h2><p>在 部屬描述類別 實作 getServletFilters()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppInitializer</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">    <span class="type">CharacterEncodingFilter</span> <span class="variable">characterEncodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">    characterEncodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="type">OpenSessionInViewFilter</span> <span class="variable">openSessionInViewFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenSessionInViewFilter</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[] &#123; characterEncodingFilter, openSessionInViewFilter &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>檔案上傳</h2><blockquote><p>需要使用再加即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppInitializer</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">customizeRegistration</span><span class="params">(Dynamic registration)</span> &#123;</span><br><span class="line">    registration.setMultipartConfig(<span class="keyword">new</span> <span class="title class_">MultipartConfigElement</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>預設首頁是放在 Spring MVC 組態類別而非部屬描述類別</p></blockquote><ul><li>同 web.xml 中的&lt;welcome-file-list&gt;&lt;welcome-file&gt;</li><li>須配合 ViewResolver&#x2F;靜態資源管理 使⽤</li><li>前面設定前綴字的那個要註解掉</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;web.*.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/**&quot;</span>).addResourceLocations(<span class="string">&quot;/WEB-INF/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">    registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>預設⾸⾴為 WEB-INF&#x2F;index.html</p></blockquote><h1 id="跟-web-xml-說再見"><a href="#跟-web-xml-說再見" class="headerlink" title="跟 web.xml 說再見"></a>跟 web.xml 說再見</h1><blockquote><p>pom.xml 預設下必須有 web.xml，要殺掉他需要設定略過檢查 web.xml</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project 略..&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;finalName&gt;spring-exercise&lt;/finalName&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;!-- 略 --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.3.2&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt; &lt;!-- 大重點 --&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h1 id="Spring-WebSocket"><a href="#Spring-WebSocket" class="headerlink" title="Spring-WebSocket"></a>Spring-WebSocket</h1><blockquote><p>dependency 自己加</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatWebSocketHandler</span> <span class="keyword">extends</span> <span class="title class_">TextWebSocketHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;WebSocketSession&gt; connectedSessionSet = Collections.synchronizedSet(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//當Client端連線連上時，會⾃動呼叫此⽅法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    connectedSessionSet.add(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//當收到Client端傳遞的訊息時，會⾃動呼叫此⽅法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="keyword">for</span> (WebSocketSession connectedSession : connectedSessionSet) &#123;</span><br><span class="line">        <span class="keyword">if</span> (connectedSession.isOpen()) &#123;</span><br><span class="line">        connectedSession.sendMessage(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        connectedSessionSet.remove(connectedSession);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//當Client端連線關閉時，會⾃動呼叫此⽅法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    connectedSessionSet.remove(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>自定義WebSocket核心組態類別</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry  registry)</span> &#123;</span><br><span class="line">    registry.addHandler(webSocketHandler(), <span class="string">&quot;/chat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebSocketHandler <span class="title function_">webSocketHandler</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ChatWebSocketHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>前端程式詳見講義</p></blockquote><blockquote><p>Spring STOMP 為進階寫法，詳情請洽官方文件</p></blockquote><h1 id="Spring-Scheduling"><a href="#Spring-Scheduling" class="headerlink" title="Spring Scheduling"></a>Spring Scheduling</h1><blockquote><p>定義在模組 Spring-Context</p></blockquote><p>自定義 Scheduling 核心組態類別</p><ul><li>加上@Scheduled(cron &#x3D; “CRON 表⽰式”) – 設定觸發時機</li><li>加上@Async – 設定非同步</li><li>撰寫想要做的事</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulingConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;* * * * * *&quot;)</span> <span class="comment">//類Cron表⽰式。每秒執行⼀次</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;task1: &quot;</span>+ <span class="keyword">new</span> <span class="title class_">Time</span>(System.currentTimeMillis()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;溫馨提示 : 本 blog 皆使用專案管理工具 Maven，其相關依賴要自己去&lt;a href=&quot;https://mvnrepository.com/&quot;&gt;https://mvnrepository.com/&lt;/a&gt; 複製唷!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What </summary>
      
    
    
    
    <category term="技術" scheme="https://example.com/categories/%E6%8A%80%E8%A1%93/"/>
    
    
    <category term="Java" scheme="https://example.com/tags/Java/"/>
    
    <category term="SpringMVC" scheme="https://example.com/tags/SpringMVC/"/>
    
    <category term="框架" scheme="https://example.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="https://example.com/2023/02/10/Spring/"/>
    <id>https://example.com/2023/02/10/Spring/</id>
    <published>2023-02-10T11:05:36.000Z</published>
    <updated>2023-02-23T14:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>三大重點 : IoC&#x2F;DI、AOP、整合其他框架(例如 : Hibernate、MyBatis)</p></blockquote><blockquote><p>分為很多個模組，有需要某功能再把.jar 加進來</p></blockquote><h1 id="IoC-x2F-DI-機制"><a href="#IoC-x2F-DI-機制" class="headerlink" title="IoC&#x2F;DI 機制"></a>IoC&#x2F;DI 機制</h1><h2>IoC 託管</h2><ul><li>被託管的物件稱為 Bean 元件</li><li>將 Java 中的物件託給 Spring 管理</li><li>物件的 實例化、初始化、存活範圍、銷毀，皆由 Spring 控制</li><li>官方建議將物件抽介面(抽象化)</li></ul><blockquote><p>控制反轉到底在做甚麼?</p></blockquote><p>簡單來說，本來是靠我們 new 兂的物件來做事情，現在這件事交由 Spring 處理，我們只要利用 Spring 提供的容器型態就可以取得 Spring 管理的物件。</p><p>Spring 提供很多 IoC 容器型態供使用，共同父型態為 BeanFactory，有一重要方法 getBean()以取得 Bean 元件。<br>通常在寫 web 時將 ServletContext 轉換成 Java 可用的 ApplicationContext 物件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//以在web環境前提下使用WebApplicationContext</span></span><br><span class="line">   <span class="comment">//透過⼯具類別WebApplicationContextUtils取得</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(ServletContext sc, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(sc);</span><br><span class="line"><span class="keyword">return</span> context.getBean(clazz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要先託管好，依賴注入才拿的到東西。。。<br>不然你就會一直看到 this.dao is null。。。</p></blockquote><h2>DI 依賴注入</h2><ul><li>如果要使用某 Bean 元件，透過 DI 來取得</li><li>DI 使用父型態(即介面)，減少相依性</li></ul><h1 id="組態設定"><a href="#組態設定" class="headerlink" title="組態設定"></a>組態設定</h1><blockquote><p>這裡以 Java+annotation 示範。。。<br>xml 太麻煩ㄌ。。。</p></blockquote><ul><li>記得掃描(Scan)套件(指定 Bean 元件位置)</li><li>找到後會實例化並接管 Bean</li><li>若 此 Bean 元件 ⼜依賴 其他 Bean 元件，亦會同時注⼊(DI)依賴的 Bean 元件</li><li>為了區分語意不使用@Component 而是帶有語意的@Repository、@Service</li></ul><p>設定託管 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">MemberDao</span> &#123;</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>設定注入 @Autowired :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MemberService</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MemberDao dao;</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立核心組態類別 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;web.*.*.impl&quot;)</span>  <span class="comment">//指定要掃描的Bean元件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 web.xml 中指定 IoC&#x2F;DI 組態 :</p><blockquote><p>ContextLoaderListener 類別</p></blockquote><ul><li>由 Spring 定義，為 Servlet API 中 ServletContextListener 介⾯的⼦實作類別</li><li>註冊此監聽器，並設定特定參數值，即可指定<br>Spring 的 組態檔&#x2F;組態類別</li></ul><p>參數 :</p><ul><li>contextConfigLocation : String type，用來指定 Spring 組態檔或是組態類別</li><li>contextClass : Class&lt;?&gt; type，用來指定 IoC 容器型態，default 為配合 xml based 的 XmlWebApplicationContext 類別，如要使用 Java based 須額外設定 AnnotationConfigWebApplicationContext 類別</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">..略</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">..略</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">org.springframework.web.context.support.AnnotationConfigWebApplicationContext</span><br><span class="line"><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>core.config.AppConfig<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring-中-JNDI-的支援"><a href="#Spring-中-JNDI-的支援" class="headerlink" title="Spring 中 JNDI 的支援"></a>Spring 中 JNDI 的支援</h1><ul><li>Spring 提供 JndiObjectFactoryBean 類別，以對應 Web 容器提供的 JNDI</li><li>會接管 託 JNDI 管理的物件(像是 DataSource)</li><li>接著再設定成 Bean 元件，即可在 Spring IoC&#x2F;DI 機制使用 JNDI 中的物件</li></ul><p>重要屬性 :</p><ul><li>resourceRef : boolean 型態，預設為 false。若設為 true，則 jndiName 屬性值可省去 “java:comp&#x2F;env&#x2F;“</li><li>jndiName : String 型態，託管在 JNDI 的物件之名稱</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>  <span class="comment">//為了可以到處注入</span></span><br><span class="line"><span class="keyword">throws</span> IllegalArgumentException, NamingException &#123;</span><br><span class="line"><span class="type">JndiObjectFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JndiObjectFactoryBean</span>();</span><br><span class="line">bean.setResourceRef(<span class="literal">true</span>);</span><br><span class="line">bean.setJndiName(<span class="string">&quot;jdbc/javaFramework&quot;</span>);</span><br><span class="line">bean.afterPropertiesSet();</span><br><span class="line"><span class="keyword">return</span> (DataSource) bean.getObject();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>jdbc&#x2F;javaFramework : 對應 context.xml 中，<Resource>標籤的 name 屬性之值<br>afterPropertiesSet() : 使⽤ Java 組態時，須⼿動呼叫此⽅法</p></blockquote><h1 id="Spring-中-Hibernate-的支援"><a href="#Spring-中-Hibernate-的支援" class="headerlink" title="Spring 中 Hibernate 的支援"></a>Spring 中 Hibernate 的支援</h1><blockquote><p>Hibernate 組態設定皆在 tag <code>&lt;session-factory&gt;</code> 中，可以說 SessionFactory 物件是 Hibernate 最核心的物件<br>Spring 為 Hibernate 提供以下支援</p></blockquote><ul><li>XML Based : 使⽤ LocalSessionFactoryBean</li><li>Java Based : 使⽤ LocalSessionFactoryBuilder</li></ul><p>Java Based :</p><p>在之前建立的核心組態 class AppConfig 託管 LocalSessionFactoryBuilder。</p><blockquote><p>基本上就是將 hibernate.cfg.xml 中的設定，搬移⾄核⼼組態類別中</p></blockquote><p>與 hibernate.cfg.xml 不同的是</p><ul><li>Session 環境管理 : 使⽤ Spring 提供的<b>SpringSessionContext </b>類別</li></ul><ul><li>註冊實體類別: 可以使⽤ <b>scanPackages()</b>⽅法，指定欲掃描的套件，與 Hibernate 一樣都要記得 mapping entity</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, NamingException &#123;</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SessionFactory <span class="title function_">sessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, NamingException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LocalSessionFactoryBuilder</span>(dataSource())</span><br><span class="line">                .scanPackages(<span class="string">&quot;web.*.entity&quot;</span>)</span><br><span class="line">                .addProperties(getHibernateProperties())</span><br><span class="line">                .buildSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Properties <span class="title function_">getHibernateProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;hibernate.dialect&quot;</span>, MySQL8Dialect.class.getName());</span><br><span class="line">        properties.setProperty(<span class="string">&quot;hibernate.show_sql&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;hibernate.format_sql&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        properties.setProperty(</span><br><span class="line">        <span class="string">&quot;hibernate.current_session_context_class&quot;</span>,</span><br><span class="line">        SpringSessionContext.class.getName());</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2>HibernateFilter支援</h2><p>在 Hibernate 中可以使用 Filter 來做交易控制</p><blockquote><p>Spring 有提供 OpenSessionInViewFilter 可以做使用</p></blockquote><p>在 web.xml 中註冊 :</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">..略</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HibernateFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">org.springframework.orm.hibernate5.support.OpenSessionInViewFilter</span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HibernateFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>在Spring中注入Session物件</h2><p>在核心組態設定時已經託管好了 SessionFactory 物件，我們的 DAO 即可注入此物件直接取的 Session 物件<br>不需要再寫像</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> getSession();</span><br></pre></td></tr></table></figure><p>這樣的程式，但有另一個問題，Session 物件非執行續安全(Thread-Safe)，直接使用 Spring 來注入會有多個執行續共用同一 Session 物件的問題，因此使用@PersistenceContext 解決問題</p><blockquote><p>@PersistenceContext 為 JPA 提供之 API</p></blockquote><ul><li>用來注入 EntityManager 型態的物件，⽽ Hibernate 的 Session 型態，即為<br>EntityManager 的⼦代</li><li>在底層仍是注入 SessionFactory 物件，但會自動呼叫<br>openSession()&#x2F;getCurrentSession()，以取得 Session 物件</li><li>效能上並不會提升，僅用來簡化程式碼</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">MemberDao</span> &#123;</span><br><span class="line">    <span class="meta">@PersistenceContext</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring - AOP"></a>Spring - AOP</h1><blockquote><p>AOP 為(Aspect-oriented programming)，譯為切面導向程式設計</p></blockquote><p>在 Spring in action 4 中有一段文字是這樣描述的 :</p><blockquote><p>AOP 允許你把遍布應用各處的功能分離出來行程可重複使用的組件。</p></blockquote><p>概念有點像是，你沒有改這段程式碼，但這段程式碼被改變了。<br>實際開發情境中，卻⼜常將系統功能相關程式，穿插撰寫在商業邏輯相關程式中，且重複出現。<br>這樣的程式，讓本⾝就繁雜的商業邏輯相關程式，更加複雜，且不易維護。<br>通常會用在 :</p><ul><li>系統功能 : 純軟體技術形成的功能，EX.交易控制、⽇誌(Log)、資安處理</li><li>商業邏輯 : 依專案需求形成的功能，EX.會員註冊、會員登⼊、會員登出、會員資料編輯</li></ul><p>這個概念比較抽象，但就我自己的理解和老師的說明，@Transcational 的這個 annotation 有點像這個概念，詳見講義，不再此多做說明。</p><h1 id="交易控制"><a href="#交易控制" class="headerlink" title="交易控制"></a>交易控制</h1><ul><li>交易控制(Transaction Control)，⼜稱交易管理(Transaction Management)</li><li>意指控制資料庫的交易</li><li>順利執行 -&gt; commit</li><li>發生執行例外 -&gt; rollback</li></ul><h2>重要型態</h2><ul><li><p>套件 org.springframework.transaction</p></li><li><p><b>PlatformTransactionManager</b></p><ul><li>交易管理器，是 Spring-交易控制最核⼼的型態</li><li>常用子實作類別<ol><li>DataSourceTransactionManager : 配合 JDBC 使⽤</li><li>JpaTransactionManager : 配合 JPA 使⽤</li><li>HibernateTransactionManager : 配合 Hibernate 使⽤</li></ol></li></ul></li><li><p><b>TransactionDefinition</b></p><ul><li>交易定義，交易的細節設定。相關設定值由@Transactional 設定</li><li>傳播⾏為(Propagation behavior) : 交易 何時開始、何時結束、是否需要交易</li><li>隔離等級(Isolation level) : 當前交易，與其他交易的隔離程度</li><li>逾時(Timeout) :<ul><li>針對較耗時的交易，可在逾時時自動 rollback</li><li>須配合傳播⾏為 PROPAGATION_REQUIRED 或 PROPAGATION_REQUIRES_NEW 使⽤</li></ul></li><li>唯讀(Read-only) :<ul><li>若交易中只執⾏了 SQL 的 select 敘述，通常資料庫端可做⼀些優化</li><li>須配合傳播⾏為 PROPAGATION_REQUIRED 或 PROPAGATION_REQUIRES_NEW 使⽤</li></ul></li></ul></li><li><p><b>TransactionStatus</b></p><ul><li>交易狀態，除了部分取代 JDBC API 中的 Connection 型態外，亦可⽤來取得交易相關資訊</li><li>可設定 新建儲存點、釋放儲存點、還原⾄儲存點、設定交易只能還原 等控制</li><li>可取得 有儲存點否、完成否、為新建否、只能還原(rollback)否 等資訊</li></ul></li><li><p>@Transcational</p><ul><li>用以標註需要交易控制的⽅法。亦可加註在型態上，表⽰其內所有⽅法皆需交易控制</li><li>交易管理器會使⽤ Spring-AOP 機制，連接有標註此 Annotation 的⽅法，進⽽做交易控制</li><li>預設狀況下，發⽣ RuntimeException 例外時，才會 Rollback</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;web.*.*.impl&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"><span class="comment">// ..略</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SessionFactory <span class="title function_">sessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, NamingException &#123;</span><br><span class="line"><span class="comment">// ..略</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TransactionManager <span class="title function_">transactionManager</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException,NamingException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HibernateTransactionManager</span>(sessionFactory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MVC 架構中，@Transcational 應放在 service 中欲受交易控制的 method 上。</p><p>以上即完成 Spring 基礎轉換，後續還可將 DAO、VO 抽換成 Spring Data JPA&#x2F;MyBatis、整體抽換成 Spring MVC、Spring Boot。<br>詳見後續筆記。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;三大重點 : IoC&amp;#x2F;DI、AOP、整合其他框架(例如 : Hibernate、MyBatis)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;分為很多個模組，有需要某功能再把.jar 加進來&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    <category term="技術" scheme="https://example.com/categories/%E6%8A%80%E8%A1%93/"/>
    
    
    <category term="Java" scheme="https://example.com/tags/Java/"/>
    
    <category term="框架" scheme="https://example.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Spring" scheme="https://example.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>三個半月的學習歷程</title>
    <link href="https://example.com/2023/01/29/%E4%B8%89%E5%80%8B%E5%8D%8A%E6%9C%88%E7%9A%84%E5%AD%B8%E7%BF%92%E6%AD%B7%E7%A8%8B/"/>
    <id>https://example.com/2023/01/29/%E4%B8%89%E5%80%8B%E5%8D%8A%E6%9C%88%E7%9A%84%E5%AD%B8%E7%BF%92%E6%AD%B7%E7%A8%8B/</id>
    <published>2023-01-29T08:01:17.000Z</published>
    <updated>2023-02-16T13:55:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>時間真的過的飛速，轉眼間已經要將近四個月了。<br>原來已經四個月了阿。</p><p>專題的部分準備要做結尾，面試也要提上日程,，心中的不安感也日漸加重。<br>我在驗收的將近一個月前就完成我的部分，比大部分同學早。<br>有更多時間去準備面試、讀 Spring，比大部分同學更能安心過個好年。<br>但心中緊張不安的情緒仍難緩解。</p><p>這時真的要感謝 Java 社群的小夥伴，有時在社群裡面聊一些放鬆嘴砲總讓我安心一些。</p><p>回想起來我的貴人很多，除了感謝我自己為了更貼近 Java 而加入社群，更多的感謝來自群裡的朋友們。<br>年前我在群裡表示我要準備面試時，群裡的資深人資叔叔很熱心的幫我模擬面試，真的除了感謝沒有他話。<br>群裡有很多大神(感謝 AC、GC 哥、醜青蛙、喵兔…etc)，還有一些歌友帶我入全民 party 的坑，種種的一切，填滿了我這四個月的日子，讓我除了徜徉在 Java 的汪洋以外，多了很多調劑身心的事情。</p><p>現實中補習班的同學也真的很好，隔壁的妹子幫我做指甲，同排的同學幫我慶生。<br>同組的同學偶爾會惹我生氣，但總歸大家都還不錯，我真的很感恩上天讓我這麼幸運。<br>我的人生走到現在我從來沒有後悔，所有的選擇造就了現在的我。<br>過去的我讓現在的我懂得感恩，我相信未來的我會慶幸現在的我選擇的一切。</p><p>我的心中一直有種感覺，我不會差。<br>雖然學歷上的弱勢的確有讓我遲疑了，我知道會有困難。<br>太久沒面對這種情況的確讓我不適應了，於是決定上來寫文章與自己對話。<br>將心中的思緒整理轉化為文字，的確讓我舒服很多。</p><p>祝我一切順利，願一切安好。</p><blockquote><p>明天要面試，加油!</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;時間真的過的飛速，轉眼間已經要將近四個月了。&lt;br&gt;原來已經四個月了阿。&lt;/p&gt;
&lt;p&gt;專題的部分準備要做結尾，面試也要提上日程,，心中的不安感也日漸加重。&lt;br&gt;我在驗收的將近一個月前就完成我的部分，比大部分同學早。&lt;br&gt;有更多時間去準備面試、讀 Spring，比大部分</summary>
      
    
    
    
    <category term="生活" scheme="https://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活小記" scheme="https://example.com/tags/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>websocket(待念書完補)</title>
    <link href="https://example.com/2022/12/29/%E6%8E%A8%E6%92%AD/"/>
    <id>https://example.com/2022/12/29/%E6%8E%A8%E6%92%AD/</id>
    <published>2022-12-29T05:52:52.000Z</published>
    <updated>2023-02-16T13:56:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>透過 Websocket(通訊標準)可以實作推播功能,有 JS,Java 等 API 可以實作。<br><br><br>先來介紹 socket,wiki 將之稱為網路插座,與網路通訊有所關聯,由柏克萊大學制定出來,其目的為<b>做為作業系統裡,行程(process)之間通訊的端點</b>,將 2 個行程想成各有一個電話(socket),他們之間可以用此通訊。<br><br><br>socket 通訊式一種<b>主從式架構(Client-Server)</b>。<br>可以實現推播的主要原因是”可雙向進行資料傳輸”。<br><br><br>TCP&#x2F;IP(最主流的網路通訊模型),有 4 層 :</p><ul><li><p>應用層 : http,ftp, POP3,SMTP</p></li><li><p>傳輸層 : 決定資料傳輸的方式,如 TCP,UDP<br>TCP 傳輸方式 :</p><ol><li>連線導向 : 一定要先建立連線(要表明身分以及確認對方身分),三向交握(建立連線前的動作)</li><li>資料傳輸可靠性高(丟過去要有回應收到才能丟下一個,未回應就一樣的東西再丟一次)</li><li>速度較慢也較耗能</li></ol><p>UDP 傳輸方式 : 與 TCP 相反,當資料傳輸的時效性大於可靠性時會選擇此方式,例如網路電話</p></li><li><p>網路層 : IP(Internet Protocol Address)資訊</p></li><li><p>實體鏈結層 : 網卡&#x2F;網路線&#x2F;WIFI 裝置等,連結網路的硬體設備</p></li></ul><p>Socket 比較像介面,介於應用層和傳輸層中間,可被實作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;透過 Websocket(通訊標準)可以實作推播功能,有 JS,Java 等 API 可以實作。&lt;br&gt;&lt;br&gt;&lt;br&gt;先來介紹 socket,wiki 將之稱為網路插座,與網路通訊有所關聯,由柏克萊大學制定出來,其目的為&lt;b&gt;做為作業系統裡,行程(process)之間通訊</summary>
      
    
    
    
    <category term="技術" scheme="https://example.com/categories/%E6%8A%80%E8%A1%93/"/>
    
    
    <category term="websocket" scheme="https://example.com/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>CSS NOTE</title>
    <link href="https://example.com/2022/12/22/CSS-NOTE/"/>
    <id>https://example.com/2022/12/22/CSS-NOTE/</id>
    <published>2022-12-22T07:31:44.000Z</published>
    <updated>2023-02-16T13:56:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>首先要知道 :<br><br>選取器中 ，[ ]代表屬性、#代表 id<br><br>以甚麼作為起始: ^&#x3D;<br><br>以甚麼作為結束: $&#x3D;<br></p><blockquote><p>*代表頁面上所有標籤找出來全部套用&#x2F;萬用</p></blockquote><ul><li>在 html 當中的任何標籤，都可以給定 class 和 id 這兩個屬性。</li><li>class：表⽰樣式表的名稱。該名稱可以套用至多個元素上。</li><li>id：表⽰該元素的唯⼀名稱。在⼀個網頁當中，同樣的 id 名稱，不能重覆。</li><li>在 CSS 中，「.」是代表 class 的意思；「#」是代表 id 的意思。</li></ul><p>, 和</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>, <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: Aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空格 : 內層全部</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‘&gt;’ : 第一層子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: Brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‘+’ : 同一層的下一個</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> +<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>~ : 同一層後面全部</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: Brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>CSS 優先權</h2><blockquote><p>後寫的會優先於前面寫的，但寫在標籤上的一定最優先 CSS 當中，有加 !important 的屬性值優先權最高</p></blockquote><h2>偽元素</h2><blockquote><p>是⼀個不存在於頁面上的元素。透過 CSS 內建的偽元素，以兩個冒號做開頭，主要是用來調整頁面上元素特定部份樣式。</p></blockquote><blockquote><p>只要有開始標籤,結束標籤,都有 2 個視覺上看不到的偽元素</p></blockquote><ul><li>::before</li><li>::after</li></ul><p>常用的 : <br></p><ul><li>::first-line：元素的第一行。</li><li>::first-letter：元素的第⼀個字。</li><li>::selection：滑鼠選取起來的範圍。</li><li>::before：元素裡⾯的最前⾯(想成是⼀個 span 標籤)。</li><li>::after：元素裡⾯的最後⾯(想成是⼀個 span 標籤)。</li></ul><p>只要加上 content:””;就可以加上文字</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.para2</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;123&quot;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2>偽類別 pseudo-class</h2><ul><li>:root : 根元素，也就是 html 標籤本身</li><li>:hover : 滑鼠移過會套用的 CSS</li><li>:first-child、 :last-child : 相對於父元素，第一、最後一個子元素</li><li>:nth-child(n) : 相對於父元素 第 n 個子元素()內為公式</li><li>:focus : 輸入焦點在欄位便套用 CSS</li><li>:checked : 當 radio button 或 checkbox 在勾選狀態時，就套用自訂 CSS</li><li>:disabled：如果元素有 disabled 狀態的話，就會套用⾃訂 CSS。</li></ul><h2>display屬性</h2><blockquote><p>重要重要!</p></blockquote><p>display 的基礎四個屬性值：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、block：區塊元素，例如：&lt;<span class="selector-tag">div</span>&gt;、&lt;<span class="selector-tag">p</span>&gt; 都是。</span><br><span class="line">會開始於新的⼀⾏，並且預設會&quot;佔滿⽗元素整個寬度&quot;。</span><br><span class="line">&gt;<span class="selector-tag">div</span>預設就是block,寬度就是佔父元素的滿版(所以會佔到後面)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、inline-block：行內區塊元素。對行內區塊元素設定 <span class="attribute">width</span> 和 <span class="attribute">height</span> 會有效。</span><br><span class="line">&gt;<span class="selector-tag">div</span>由原來的上下排變成橫向排列</span><br><span class="line">*較有彈性,比較常用</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、inline：例：&lt;<span class="selector-tag">span</span>&gt;、&lt;<span class="selector-tag">a</span>&gt;。對行內元素設定 <span class="attribute">width</span> 和 <span class="attribute">height</span> 都會失效。</span><br><span class="line">&gt;<span class="selector-tag">span</span>,<span class="selector-tag">a</span>預設為inline</span><br><span class="line">上下會有縫隙,是行高的關係</span><br><span class="line">(行高<span class="attribute">line-height</span>預設為<span class="number">16px</span>*<span class="number">1.5</span> = <span class="number">24px</span>,可用<span class="number">1.5</span>表示)</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、<span class="attribute">none</span>：元素會於頁面中消失，不會佔住原來的空間位置，但仍然存在於頁面原始碼當中。</span><br><span class="line">CF: visibility : visible ;</span><br><span class="line">    <span class="comment">/*visible(預設)  | hidden(消失但會佔位)*/</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、<span class="attribute">flex</span>:預設為nowrap</span><br><span class="line">   flex-wrap: wrap;</span><br><span class="line"><span class="comment">/* nowrap(預設) | wrap*/</span></span><br><span class="line"><span class="comment">/* display: inline-block; 有縫隙問題的替代方案 */</span></span><br></pre></td></tr></table></figure><p>結論 : <br><br>元素上下排 : block<br><br>橫向 : inline-block</p><h2> 定位 position</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>:static;</span><br><span class="line"><span class="comment">/* static(預設) | relative | absolute | fixed(固定在螢幕且不佔位) | sticky */</span></span><br><span class="line">搭配使用 <span class="attribute">top</span> <span class="attribute">bottom</span> <span class="attribute">right</span> <span class="attribute">left</span> 來設定位置</span><br><span class="line"></span><br><span class="line">ex.</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0px</span>;(也可用%)</span><br><span class="line"></span><br><span class="line">CF: transform: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">  (移動元素本身的一半)</span><br></pre></td></tr></table></figure><ul><li><p>relative :想對當前元素本來的位置做位移,不影響周圍元素</p></li><li><p>absolute :相對於父元素(非 static 的)的位置去做位移(會一直往上找)</p></li><li><p>sticky : 當遇到 top 0 時會一起往下掉(黏住)</p><blockquote><p>top:0; (常用)<br> &gt; **只限於父元素內,頁面離開父元素後會跟著一起離開</p></blockquote></li><li><p>z-index : 當 2 元素重疊時,可以設定誰要在上誰要在下,以數值大小比較</p><blockquote><p>通常會寫在上方</p></blockquote></li></ul><h2>float 浮動</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">float</span>: none;</span><br><span class="line">&gt;可以做文繞圖</span><br><span class="line">&gt;當元素設定<span class="attribute">float</span>時,如果文字高度撐不到圖片元素高度,會很奇怪</span><br><span class="line">解決方式</span><br><span class="line"><span class="number">1</span><span class="selector-class">.overflow</span>: hidden;(不建議)</span><br><span class="line"><span class="number">2</span>.使用psudoclass</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.float_block</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>文字樣式</h2><h3>大小</h3><ol><li>⼀般若沒有特別設定，網⾴上預設的文字大小是 16 px。</li><li>文字大小的單位，常用的有分兩種：<br>第⼀種是固定單位，即 px；<br>第⼆種是相對單位，即 %、em、rem。</li><li>% 與 em 單位，都是相對於父元素的文字大小。</li><li>rem 單位，是相對於根元素的文字大小，所謂根元素，<br>指的就是最外層的 <html> 標籤(:root)本身。</li></ol><blockquote><p>根元素預設為 16px,但若使用 rem 會不好計算,可以將根元素設定為 10px 來使用之後排版計算簡單</p></blockquote><h3>文字水平對齊</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: left;</span><br><span class="line"> <span class="comment">/* left(靠左對齊) | right(靠右對齊) | center(⽂字置中) | justify(⽂字的左右兩邊切齊) */</span></span><br></pre></td></tr></table></figure><h3>文字行高</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">line-height</span>: normal;</span><br></pre></td></tr></table></figure><ul><li>normal：預設值，預設大約是 font-size 的 1.4 倍。</li><li>數值：會是 font-size 文字大小的倍數。</li><li>固定像素：例如 32px。</li></ul><h3>文字設定</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: normal;</span><br><span class="line"><span class="attribute">normal</span>：預設值，連續空格、斷⾏都會被壓縮成⼀個空格。</span><br><span class="line">pre：保留連續空格、斷⾏。</span><br><span class="line">nowrap：限制不能斷⾏。</span><br></pre></td></tr></table></figure><h3>文字斷行(word-break)&連字符號(hyphens)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="attribute">word-break</span> 和 <span class="attribute">hyphens</span> 這兩個屬性通常是針對英⽂字。</span><br><span class="line"><span class="number">2</span>. <span class="attribute">word-break</span> 屬性常用的設定有：</span><br><span class="line"> <span class="attribute">normal</span>：預設值。</span><br><span class="line"> break-word：以單字為單位來斷⾏。</span><br><span class="line"> break-<span class="attribute">all</span>：以字母為單位來斷⾏。</span><br><span class="line"><span class="number">3</span>. <span class="attribute">hyphens</span> 屬性常用的設定有：</span><br><span class="line"> manual：預設值，意思是如有需要，開發人員自行寫</span><br><span class="line"> (例如⾃⼰寫 <span class="selector-tag">HTML</span> Entity： &amp;hyphen; )。</span><br><span class="line"> auto：由瀏覽器自行判斷是否要出現連字符號。</span><br></pre></td></tr></table></figure><h3>縮排和距離</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>: <span class="number">40px</span>;</span><br><span class="line">    首行縮排 至少要有<span class="number">2</span>個字才能縮排</span><br><span class="line"><span class="attribute">letter-spacing</span>: <span class="number">5px</span>;</span><br><span class="line">    字和字之間的距離</span><br><span class="line"><span class="attribute">word-spacing</span>: <span class="number">5px</span>;</span><br><span class="line">    單字和單字之間的距離</span><br></pre></td></tr></table></figure><h3>字體</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">襯線(線條上有粗有細):serif</span><br><span class="line">無襯線 sans-serif</span><br></pre></td></tr></table></figure><p>也可載入 google 字體</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"> <span class="keyword">@fon-face</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">&quot;myname(自行命名)&quot;</span></span><br><span class="line">  src: <span class="built_in">url</span>(<span class="string">&quot;./fonts/NotoSansTC-Light.otf)</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">/*要載入另一字體要再寫一次*/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@font-face&#123;</span></span><br><span class="line"><span class="string">  font-family:&quot;</span><span class="string">myname_bold&quot;</span></span><br><span class="line"><span class="string">  src: url(&quot;./fonts/NotoSansTC-Bold.otf</span>)</span><br><span class="line"> &#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.para1</span>&#123;</span><br><span class="line"> <span class="attribute">font-family</span>=&quot;myname&quot; ,serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">font-display</span>: swap;</span><br><span class="line"><span class="comment">/*載入時不會不見*/</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2>背景</h2><h3>背景圖無法撐元素高度</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;連結/網址&quot;</span>)</span><br><span class="line">    有水平方向和垂直方向的轉移</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>背景反覆出現</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;連結/網址&quot;</span>)</span><br><span class="line">    background-repeat: repeat;</span><br><span class="line"><span class="comment">/* repeat(預設) | no-repeat | repeat-x | repeat-y | space | round(背景圖會有變形情況) */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3>背景圖大小</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line"> <span class="comment">/* 元素寬度的100% */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line"> <span class="comment">/* 寬 高 */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">background-size</span>: contain;</span><br><span class="line"><span class="comment">/*背景寬 or高達成100%(目的是讓背景圖在元素內完整呈現) */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-size</span>: cover;</span><br><span class="line"><span class="comment">/* 背景寬 or高達成100%(目的是讓背景圖在元素內佔滿元素) */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3>背景圖位置</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-position</span>: left top;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*left | center  | right水平*/</span></span><br><span class="line"><span class="comment">/*top | center | bottom垂直*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">50px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="comment">/*離左50 上20*/</span></span><br><span class="line"></span><br><span class="line">等同於</span><br><span class="line"><span class="attribute">background-position</span>: right <span class="number">50px</span> bottom <span class="number">20px</span>;</span><br></pre></td></tr></table></figure><h3>背景圖固定模式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span>:scroll;</span><br><span class="line"><span class="comment">/* scroll(預設) | local | fixed(固定在頁面上可視區域)*/</span></span><br><span class="line">*放在<span class="selector-tag">body</span>標籤</span><br><span class="line"></span><br><span class="line"><span class="attribute">overflow</span>: scroll ;</span><br><span class="line">區塊內文字超出顯示垂直卷軸</span><br></pre></td></tr></table></figure><h3>背景圖顯示區域</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-origin</span>: padding-box;</span><br><span class="line"><span class="comment">/* padding-box(預設)</span></span><br><span class="line"><span class="comment">border-box(背景圖從邊框開始呈現)</span></span><br><span class="line"><span class="comment">content-box(背景圖從content開始呈現)  */</span></span><br></pre></td></tr></table></figure><h3>背景圖裁切區域</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-clip</span>: border-box;</span><br><span class="line"><span class="comment">/* border-box(padding區域以外的背景圖會被遮掉) | padding-box | content-box */</span></span><br></pre></td></tr></table></figure><h3>背景線性漸層</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradiant</span>( red , green);</span><br></pre></td></tr></table></figure><h3>同個區域設定多個背景</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;連結/網址&quot;</span>), <span class="built_in">url</span>(<span class="string">&quot;連結/網址&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat, repeat;</span><br><span class="line"></span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">50%</span>, auto;</span><br></pre></td></tr></table></figure><h2>其他</h2><p>元素不透明度(圖片) opacity</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">opacity</span>: <span class="number">1</span>(預設)</span><br><span class="line"><span class="comment">/* 0完全透明 | 0.9 | .5*/</span></span><br></pre></td></tr></table></figure><p>元素可見</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">visibility</span>: visible;</span><br><span class="line"><span class="comment">/* visible(預設) |hidden(隱藏但是佔位)*/</span></span><br><span class="line">cf:</span><br><span class="line">    display: none;</span><br><span class="line">    不會佔住位子</span><br></pre></td></tr></table></figure><p>輪廓</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">outline</span>: 位於邊框之外</span><br><span class="line">   可以往外推或是內移</span><br><span class="line">outline-offset: <span class="number">3px</span>;</span><br><span class="line">//預設<span class="number">0</span></span><br><span class="line">-<span class="number">1</span> -<span class="number">2</span> <span class="number">3</span> <span class="number">5</span> px <span class="attribute">none</span>;</span><br><span class="line"><span class="number">4</span>個邊一起設定無法單獨設定</span><br></pre></td></tr></table></figure><p>游標</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: auto;</span><br><span class="line"><span class="comment">/*auto(預設) | pointer*/</span></span><br><span class="line"></span><br><span class="line">自訂游標的寫法，加上 default !important，如下範例：</span><br><span class="line"><span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&quot;圖片路徑&quot;</span>), default <span class="meta">!important</span>;</span><br></pre></td></tr></table></figure><p>圓角</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span> :<span class="number">2px</span>;</span><br><span class="line"></span><br><span class="line">可寫<span class="number">2</span>個數值 左上右下+右上左下</span><br><span class="line">可寫<span class="number">3</span>個數值 左上 右上 右下+左下</span><br><span class="line">可寫<span class="number">4</span>個數值 左上 右上(順時針)....</span><br><span class="line">當⼀個元素是正⽅形時，設定圓角為 <span class="number">50%</span>，就會變圓形，可以再搭配</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">設定將圖片超出元素的話，就隱藏。</span><br></pre></td></tr></table></figure><p>transition 轉場</p><blockquote><p>有數值上的變化才可以做變化</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition-duration</span>: ;</span><br><span class="line">設定轉場期間(,區隔)</span><br><span class="line"><span class="attribute">transition-property</span>: all;</span><br><span class="line">設定哪個屬性作轉場</span><br><span class="line">(<span class="attribute">all</span> 自動抓出有數值變化的屬性)</span><br><span class="line"></span><br><span class="line"><span class="attribute">transition-timing-function</span> : ease;</span><br><span class="line">(速度上的變化)</span><br><span class="line"><span class="comment">/* ease預設 | linear等速 | ease-in慢&gt;快 | ease-out快&gt;慢 | ease-in-out */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">transition-delay</span>: <span class="number">1s</span>;</span><br><span class="line">(停留一秒再觸發效果)(多個屬性以,區隔)</span><br><span class="line"></span><br><span class="line">簡寫</span><br><span class="line"><span class="attribute">transition</span> : all <span class="number">0s</span> ease <span class="number">0s</span>;</span><br><span class="line"><span class="comment">/*transition-property ,transition-duration ,transition-timing-function,transition-delay*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span>搭配<span class="keyword">@keyframes</span></span><br><span class="line"></span><br><span class="line">animation-name : @keyframes的命名</span><br><span class="line">animation-duration : (秒數)</span><br><span class="line"></span><br><span class="line">animation-iteration-count : 次數;</span><br><span class="line">(infunite無限多次重覆)</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-direction</span> :</span><br><span class="line"><span class="comment">/*normal(預設) | reverse(反向) | alternate(交錯執行,執行2次) | alternate-reverse*/</span></span><br><span class="line"></span><br><span class="line">animation-delay : 動畫延遲(秒)</span><br><span class="line"></span><br><span class="line">animation-fill-mode : 填滿</span><br><span class="line"><span class="comment">/* none(預設) | forwards(停留在100%的位置) | backwards(delay期間停留在0%) | both */</span></span><br><span class="line"></span><br><span class="line">animation-play-state : <span class="built_in">running</span>(預設) | <span class="built_in">paused</span>(暫停)</span><br><span class="line">(暫停鍵)搭配JS</span><br><span class="line"></span><br><span class="line">animation-timing-function :</span><br><span class="line"><span class="comment">/* ease預設 | linear等速 | ease-in慢&gt;快 | ease-out快&gt;慢 | ease-in-out */</span></span><br></pre></td></tr></table></figure><h1 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h1><blockquote><p>先了解區塊模型 Box Model</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: border-box ;</span><br><span class="line"><span class="comment">/* content-box(預設) | border-box(常用,切版較好用) */</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span> : 上 右 下 左   <span class="comment">/* 設定方向 */</span></span><br><span class="line">    : 上  左右  下</span><br><span class="line">    : 上下  左右</span><br><span class="line"></span><br><span class="line">margin : 上下取其大</span><br><span class="line"> 左右相加</span><br><span class="line">*body標籤有預設margin : <span class="number">8</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">對齊字的下緣</span><br><span class="line"><span class="comment">/* baseline(預設) | top | bottom | middle */</span></span><br><span class="line">cf:</span><br><span class="line">    圖片的邊框會有縫隙,因為圖片和文字的vertical-align要對齊此時有<span class="number">2</span>處理方式:</span><br><span class="line"><span class="number">1</span>. 對外面的div做font-size: <span class="number">0</span>;</span><br><span class="line"><span class="number">2</span>. 對<span class="selector-tag">div</span>裡面的<span class="selector-tag">img</span>標籤做<span class="attribute">vertical-align</span>: bottom;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另現今為了因應智慧型手機的出現出現了優化成響應式網站,利用 RWD 技術來達成,通常以螢幕寬度 768px 為基礎,大於為網頁版,小於為行動版，有的會使用 767.98,避免會有些微差距。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h1&gt;&lt;p&gt;首先要知道 :&lt;br&gt;&lt;br&gt;選取器中 ，[ ]代表屬性、#代表 id&lt;br&gt;&lt;br&gt;以甚麼作為起始: ^&amp;#x3D;&lt;br&gt;&lt;br</summary>
      
    
    
    
    <category term="技術" scheme="https://example.com/categories/%E6%8A%80%E8%A1%93/"/>
    
    
    <category term="CSS" scheme="https://example.com/tags/CSS/"/>
    
    <category term="前端" scheme="https://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>HTML NOTE</title>
    <link href="https://example.com/2022/12/21/HTML-NOTE/"/>
    <id>https://example.com/2022/12/21/HTML-NOTE/</id>
    <published>2022-12-21T11:46:55.000Z</published>
    <updated>2023-02-16T13:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>網頁前端大致由三個元素組成,HTML、CSS、JavaScript</p></blockquote><ul><li>HTML : 負責結構和語意</li><li>CSS : 外觀與視覺排版</li><li>JS : 使用者與網頁之間的操作行為</li></ul><p>可以使用 w3c markup validation service 來檢查<br>瀏覽器和編輯器,前端通常需要測試，所以需要多個瀏覽器</p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><ul><li>有的標籤有開始標籤,結束標籤,有的標籤<b>沒有結束標籤</b></li><li>如果有屬性,要寫在開始標籤當中</li></ul><p>EXAMPLE :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 段落 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 以下2者不需結束標籤 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 斷行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 水平線 --&gt;</span></span><br></pre></td></tr></table></figure><h2>關於元素</h2><ol><li>所有標籤一律小寫</li><li>多個連續空格瀏覽器會視為只有一個空格</li><li>避免標籤交叉的狀況(會造成結構錯誤)</li><li>縮排一律用 2 或 4 個空格</li><li>html 第一層子元素只能有 head 和 body</li><li>了解父元素和子元素</li><li>編輯器對齊輔助線,幫助可讀性(善用 autoformat)</li></ol><p>主要分為 :</p><ul><li>行內元素:水平排列</li><li>區塊元素:垂直排列</li></ul><h2>關於註解</h2><ul><li>不能寫在 script 裡面:<br>因為裡面是 javascript 程式碼執行的地方</li><li>也不能寫在 style 裡面:<br>因為裡面是 css 的東西–&gt;style 註解為&#x2F;**&#x2F;</li><li>不要放任何機密資訊在裡面，會被看的一清二楚</li><li>註解內不能再註解，會解析錯誤</li></ul><h2>關於版本宣告</h2><p>在 HTML5 出來後增加很多新的標籤,給撰寫者極大的方便,為了做區分需再文件最上面做版本宣告</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>關於METADATA中介資料</h2><p>至少要有這四個 meta 標籤，主要是給瀏覽器或搜尋引擎看包含字元集編碼、網頁關鍵字設定、簡易描述設定。<br><br>如果要做行動版網路 viewport 一定要加。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">中介資料<span class="tag">&lt;<span class="name">meta</span>&gt;</span> 要寫在<span class="tag">&lt;<span class="name">head</span>&gt;</span>裡面、不需要結束標籤</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">字元集編碼(utf-8為佳)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;html,css,javascript,網頁設計&quot;</span>&gt;</span></span><br><span class="line">設定此網頁你有甚麼關鍵字想要下</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">對網頁簡易的一個描述</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, user-scalable=yes&quot;</span>&gt;</span></span><br><span class="line">針對RWD行動版網頁一定要設定的 寬度/使用者可否做縮放</span><br></pre></td></tr></table></figure><h2>關於各種標籤</h2>大致結構(以下省略結束標籤以便我寫筆記) :<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>網頁額外資訊,額外資訊提供給瀏覽器和搜尋引擎</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml">放置css原始碼</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">希望使用者先看到內容再去執行JS，所以寫在body的結束標籤之前</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span>給使用者看的(包含相關文案內容/標題/圖片/段落)</span></span></span></span><br></pre></td></tr></table></figure><p>有 2 種無語意概念標籤 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>:行內元素</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>:區塊元素</span><br><span class="line"> 常用於排版或是介面修飾上</span><br></pre></td></tr></table></figure><p>有一些有語意的結構標籤 html 5 後新增的<br>皆為”區塊類型標籤”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>頁首</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>頁尾</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>導覽</span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span>主內容   <span class="comment">&lt;!-- 最多只能出現一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>獨立元件，內容/主要內容  //與周圍內容無關，獨立</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>頁面區域/章節/區塊</span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span> 側邊欄</span><br><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span>詳細資料(可折疊) //較新的標籤</span><br></pre></td></tr></table></figure><p>其他有小作用的標籤<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>上標</span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>下標</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>粗體/表達重要文字</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span> 強調/斜體</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span> 替代性概念/斜體  可利用font awesome 但要載入</span><br><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>標記/背景黃(預設)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>=preformatted text</span><br><span class="line">    保留空格 斷行/保留文字格式</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">  表示程式的標籤，</span><br><span class="line">  語意上的概念，並非要去執行程式，為一&quot;行內元素&quot;</span><br><span class="line">  *通常搭配<span class="tag">&lt;<span class="name">pre</span>&gt;</span>使用來保留斷行，空格字元</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">  網頁標題</span><br><span class="line">  常出現在google搜尋列表中</span><br><span class="line">  *需打在<span class="tag">&lt;<span class="name">head</span>&gt;</span>裡面</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span></span><br><span class="line">  文案當中表達有日期時間概念</span><br><span class="line">  搜尋引擎和瀏覽器知道這段代表時間的概念</span><br><span class="line">  常搭配datetime作使用,為&quot;行內元素&quot;</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;寫給電腦看的&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span>&gt;</span>=abbreviation,縮寫</span><br><span class="line">    常與<span class="tag">&lt;<span class="name">title</span>&gt;</span>屬性搭配，將縮寫的原文打在<span class="tag">&lt;<span class="name">title</span>&gt;</span>屬性中，為&quot;行內元素&quot;</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;abbreviation&quot;</span>&gt;</span>abbr<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br></pre></td></tr></table></figure><p><abbr title="abbreviation">abbr</abbr></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>引用</span><br><span class="line"> 表示文案當中的文字是從其他地方引用過來的</span><br><span class="line"> 搭配cite屬性</span><br><span class="line">    (會自動縮排)</span><br></pre></td></tr></table></figure><p>列表 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>無序列表 = unorder list</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>有序列表 = order list</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>項目 = list item</span><br><span class="line"></span><br><span class="line">注意!</span><br><span class="line">前二者第一層子元素</span><br><span class="line">只能放<span class="tag">&lt;<span class="name">li</span>&gt;</span>不能放其他的像是<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>要放在<span class="tag">&lt;<span class="name">li</span>&gt;</span>內</span><br></pre></td></tr></table></figure><p>可使用 CSS 設定:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style</span>:none;</span><br><span class="line"><span class="comment">/* 表示不要預設的符號 */</span></span><br></pre></td></tr></table></figure><p>清單 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>= definition list</span><br><span class="line">   定義要解釋的名詞術語有哪些</span><br><span class="line">   (名詞術語清單)</span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>= define term</span><br><span class="line">   定義要解釋的名詞術語是甚麼</span><br><span class="line">   (名詞術語)</span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>= definition description</span><br><span class="line">   解釋的名詞術語的意思</span><br></pre></td></tr></table></figure><p>連結 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>= anchor</span><br><span class="line">    點擊連結導向b網頁</span><br><span class="line"></span><br><span class="line">屬性 target=&quot;_self&quot;  此為預設值，使用當前分頁開啟</span><br><span class="line">開啟新分頁則使用 target=&quot;_blank&quot;</span><br><span class="line"></span><br><span class="line">若想要只使用一個分頁開啟可自訂1個名稱</span><br><span class="line">e.g. target=&quot;aa&quot;</span><br><span class="line">   //某新分頁命名aa</span><br><span class="line">網址皆使用同一導向名稱可使用同一分頁開啟</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.google.com.tw/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>connect to google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.google.com.tw/" target="_blank">connect to google</a></p><p>圖片 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line"> 沒有結束標籤</span><br><span class="line"> 相對路徑 : .(當前所在資料夾) ..(上一層資料夾)</span><br><span class="line"> 絕對路徑 : 圖片在電腦中實際位置</span><br><span class="line"></span><br><span class="line"> 圖片在網路上也可以直接打網址</span><br><span class="line"> alt屬性:當圖片有誤會出現的替代文字</span><br><span class="line"> title屬性:滑鼠停留出現的文字</span><br></pre></td></tr></table></figure><p>獨立內容 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">自有一小段獨立內容的意思</span><br><span class="line">會自動縮排</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span></span><br><span class="line">這段獨立內容標題的意思，可放上或下都行</span><br><span class="line"></span><br><span class="line">用法 :</span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>這是一張圖片<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表格 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>=table heading</span><br><span class="line">    表格標題</span><br><span class="line">    有預設的粗體</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>= table row</span><br><span class="line">    表格列的意思</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>=table data</span><br><span class="line">    表格資料的意思</span><br><span class="line">    資料的部分都是放在裡面</span><br><span class="line"></span><br><span class="line">html 5版本出來後多的新標籤</span><br><span class="line"> 表頭   <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"> 主標題 <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"> 表尾   <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 屬性:表格合併的用途</span><br><span class="line"> rowspan 列合併(直向)</span><br><span class="line"> colspan 行合併(橫的)</span><br><span class="line"> *要把被合併的td註解起來，不然會被推出去有新的行列</span><br><span class="line"> *不能跨越<span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line"></span><br><span class="line">用法 :</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;5&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:2px pink solid;text-align:center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>使用 rowspan 的欄位<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>表格欄位<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>表格欄位<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table border="1" cellpadding="5" style="border:2px pink solid;text-align:center;"><tr><td rowspan="2">使用 rowspan 的欄位</td><td>表格欄位</td></tr><tr><td>表格欄位</td></tr></table><p>可使用 CSS 設定 :</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>: collapse;&lt;br&gt;</span><br><span class="line"><span class="comment">/* separate(預設) | collapse邊框會壓縮 */</span></span><br><span class="line"></span><br><span class="line">*<span class="selector-tag">thead</span> <span class="selector-tag">tbody</span>無法當作選取器使用</span><br></pre></td></tr></table></figure><p>嵌入外站 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">innerframe,內部框架</span><br><span class="line">*有時未必允許，因為對方伺服器可以block</span><br></pre></td></tr></table></figure><h2>關於HTML Entity(實體)</h2>用來呈現一些字元、特殊符號<br>有太多可以上網查list:<br>https://www.freeformatter.com/html-entities.html<br>可輸入entity name或是entity number<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt; : <span class="symbol">&amp;lt;</span></span><br><span class="line">&gt; :  <span class="symbol">&amp;gt;</span></span><br><span class="line">&quot; : <span class="symbol">&amp;quot;</span></span><br><span class="line">&#x27; : <span class="symbol">&amp;apos;</span></span><br><span class="line">© : <span class="symbol">&amp;copy;</span></span><br><span class="line">&amp; : <span class="symbol">&amp;amp;</span></span><br></pre></td></tr></table></figure><h2>關於SVG</h2>因為會有太多東西，所以通常習慣將繪圖或是動畫效果打包塞進.svg內,比較特別的是官方說需要加入命名空間。<br>命名空間 : 標籤太多，要告知瀏覽器svg的標籤在某一規範下，以免瀏覽器無法識別標籤。<br>參考 : https://developer.mozilla.org/zh-CN/docs/Web/SVG/Namespaces_Crash_Course<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/my.svg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid orange;&quot;</span>&gt;</span></span><br><span class="line">使用<span class="tag">&lt;<span class="name">img</span>&gt;</span>去載入外部svg</span><br><span class="line"></span><br><span class="line">畫直線<span class="tag">&lt;<span class="name">line</span>&gt;</span></span><br><span class="line">畫圓<span class="tag">&lt;<span class="name">circle</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;25&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;25&quot;</span> <span class="attr">r</span>=<span class="string">&quot;25&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;gray&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;lightgray&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span></span><br><span class="line">看到要知道此區域寫了很多繪圖 動畫.小遊戲</span><br><span class="line">(用javascript)寫的</span><br></pre></td></tr></table></figure><h2>關於VIDEO、AUDIO</h2><blockquote><p>要注意 : 瀏覽器對屬性值的支援程度不同!</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot; 網址 &quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- type可以省略 --&gt;</span></span><br><span class="line"> 如果瀏覽器不支援HTML 5 video 標籤,就出現這裡的文字</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- video/mp4 video/ogg video/webm --&gt;</span></span><br></pre></td></tr></table></figure><p>audio 為 html 5 新出的標籤 載入聲音相關檔案</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot; 網址&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">如果瀏覽器不支援HTML 5 audio 標籤,就出現這裡的文字</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- audio/mpeg audio/ogg --&gt;</span></span><br></pre></td></tr></table></figure><h3>常用屬性:</h3><blockquote><p>屬性可以疊加</p></blockquote><p>controls : 有控制向的按鈕<br><br>poster&#x3D;”網址” : 預覽圖片<br><br>autoplay : 自動撥放，但依瀏覽器規範不同，有時要加上 muted 靜音才可以自動撥放<br><br>muted : 靜音<br><br>loop : 自動重播<br><br>disablePictureInPicture : 禁止使用子母畫面<br><br>controlsList&#x3D;”nodownload” : 禁止下載<br><br>playsinline : 手機上播放時避免影片直接進入全螢幕<br></p><h2>關於表單</h2>只要是表單就要用form標籤<br>屬性 :<ul><li>action&#x3D;”資料要送到的網址”</li><li>method&#x3D;”資料傳送的方式 get&#x2F;post”<br>get 會將表單資料送到 action 指定網址<br>post 會將表單資料送到 form data<h3>input標籤</h3>文字框 :</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">文字框</span><br><span class="line">*for &amp; id屬性內值一樣可以做到點擊優化</span><br><span class="line">*無結束標籤</span><br><span class="line">*有做優化 type可以為email,tel,web,date,number</span><br><span class="line"></span><br><span class="line">屬性placeholder可以提示使用者填入資料</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;HI&quot;</span>&gt;</span>如下</span><br></pre></td></tr></table></figure><p><input type="text" placeholder="HI"><br><br>可以搭配 :</p><ul><li>placeholder 提示使用者填入資料</li><li>value 預設有值</li><li>readonly 唯讀</li><li>disabled 無法編輯</li></ul><p>密碼文字框 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">type=&quot;hidden&quot;</span><br><span class="line">用途:電商網站後台編輯個人資料，可能隱藏會員id在文字框中的隱藏欄位，送出資料時憶起送出才知道要更新哪一筆資料</span><br></pre></td></tr></table></figure><p>多行文字框 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">&quot;&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">屬性rows cols可調整大小(或在CSS中調整) 如下</span><br></pre></td></tr></table></figure><textarea placeholder="" rows="" cols=""></textarea><p>表單送出按鈕 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;填好送出&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><input type="submit" name="" value="填好送出"><h3>單選</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">單選</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;math&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">checked預設選取</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;math&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">name屬性值相同被視為一組單選</span><br><span class="line">屬性for和id相同可優化選項(點擊選項即可點擊)</span><br></pre></td></tr></table></figure><input type="radio" name="1" id="math" checked>   <label for="math">1</label><input type="radio" name="1"><label>2</label><h3>勾選(多選)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    旅遊過的國家:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;con[]&quot;</span> <span class="attr">id</span>=<span class="string">&quot;japan&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;japan&quot;</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;con[]&quot;</span> <span class="attr">id</span>=<span class="string">&quot;korea&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;korea&quot;</span>&gt;</span>韓國<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;con[]&quot;</span> <span class="attr">id</span>=<span class="string">&quot;america&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;america&quot;</span>&gt;</span>美國<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">name屬性 因為傳送資料的關係要加[]</span><br><span class="line">*如果使用servlet抓資料不需要加[],但name屬性要一樣,用req.getParameterValues()方法可以直接取得String[]陣列形式的資料</span><br></pre></td></tr></table></figure><p>參考資料 :<a href="https://blog.othree.net/log/2007/01/16/checkbox/">https://blog.othree.net/log/2007/01/16/checkbox/</a></p><div>    旅遊過的國家:    <input type="checkbox" name="con[]" id="japan" >    <label for="japan">日本</label>    <input type="checkbox" name="con[]" id="korea" >    <label for="korea">韓國</label>    <input type="checkbox" name="con[]" id="america">    <label for="america">美國</label></div><h3>按鈕</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:pink&quot;</span>&gt;</span>按鈕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:lightblue&quot;</span>&gt;</span>資料送出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">+submit表單內所有欄位資料會送到form標籤中action屬性指定網址</span><br></pre></td></tr></table></figure><p><button type="button" style="color:pink">按鈕</button><br><button type="submit" style="color:lightblue">資料送出</button></p><p>傳送標籤比較 : <br><br>QUE :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;填好送出&quot;</span>&gt;</span>以及</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>資料送出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">這兩者在應用上有差別嗎?</span><br><span class="line">另一點是，我知道button 標籤加上屬性submit表單內所有欄位資料會送到form標籤中action屬性指定網址，請問input標籤有同樣效果嗎?</span><br></pre></td></tr></table></figure><p>ANS : 關於 button 標籤在頁面上都是做為互動效果時使用，例如在頁面上設計點選後就可以開啟作品大圖或者可以跳轉到其他頁面，當然也可以用來作表單的應用。<br>而表單中的 input 的欄位，除了是單行輸入文字之外，也可以像課堂上提到的，改變 type 值就可以有不同的效果。若要把 input 做為表單的送出按鈕效果，則只要修改 type 值為 submit 即可。<br>至於表單傳送的目的地或編碼..通常是設定在 form 標籤內，當按下 input 按鈕（type&#x3D;submit)時,可以透過郵件伺服器將表單欄位內容送出。<br>以目前 HTML5 版本來説 也有支援直接在 input 標籤內使用 formaction 、formmethod 來指定傳送方式與目的地.</p><p>在網頁設計中，a 標籤、button 標籤、input 標籤都可以設計成按鈕功能。我個人推薦的是如果要設計表單填寫完的送出按鈕，使用 input 標籤是較合適的。若是要設計左右上下移動的遊戲按鈕，使用 button 標籤會很好搭配。</p><h3>下拉式選單</h3><blockquote><p>value 為傳遞資料到後端會傳的數值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;no1&quot;</span>&gt;</span>   <span class="comment">&lt;!-- 選項群組化 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;no2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">selected</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><select>    <optgroup label="no1">   <!-- 選項群組化 -->        <option value="1" selected>1</option>        <option value="2">2</option>    </optgroup>    <optgroup label="no2">        <option value="3" >3</option>        <option value="4">4</option>        <option value="5">5</option>    </optgroup></select><blockquote><p>直接加上 multiple 可以變成多選</p></blockquote><blockquote><p>JS 中值改變使用 change</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;網頁前端大致由三個元素組成,HTML、CSS、JavaScript&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;HTML : 負責結構和語意&lt;/li&gt;
&lt;li&gt;CSS : 外觀與視覺排版&lt;/li&gt;
&lt;li&gt;JS : 使用者與網頁之間的操作</summary>
      
    
    
    
    <category term="技術" scheme="https://example.com/categories/%E6%8A%80%E8%A1%93/"/>
    
    
    <category term="前端" scheme="https://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML" scheme="https://example.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Redis筆記</title>
    <link href="https://example.com/2022/12/19/Redis%E7%AD%86%E8%A8%98/"/>
    <id>https://example.com/2022/12/19/Redis%E7%AD%86%E8%A8%98/</id>
    <published>2022-12-19T01:06:11.000Z</published>
    <updated>2023-02-16T13:57:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis-REmote-DIctionary-Server"><a href="#Redis-REmote-DIctionary-Server" class="headerlink" title="Redis(REmote DIctionary Server)"></a>Redis(REmote DIctionary Server)</h1><p>Redius 為非關聯式的鍵值資料庫(Map)<br><br><br>支援的資料型別:</p><ul><li>字串型態(String)<br>包含字串(JSON,BASE64,二進位資料),整數,浮點數</li><li>雜湊(Hash)型態<br>巢狀 key-value,無順序性</li><li>列表(List)型態</li><li>集合(Set)型態</li><li>有序集合(Sorted Set)型態<br>Zset</li></ul><blockquote><p>指令和 key 型別要對,不然會噴 Exception</p></blockquote><h2>功能特性</h2><ul><li><p>Redis 將所有資料都儲存在<b>記憶體</b>裡<br><i>讀寫速度比硬碟快上許多</i></p></li><li><p>Redis 提供了持久化的支援<br><i>記憶體的資料以非同步的方式輸出到硬碟裡</i></p></li><li><p>可以幫每個 key 設定存活時間 (Time To Live, TTL),常用於快取和佇列</p></li><li><p>提供了十幾種不同程式語言的 API</p></li></ul><h2>安裝</h2><br>Redis官方並不對Windows進行安裝支援的開發,但微軟的Open Technologies Inc.還是發佈了一個可以在Windows上執行Redis的分支，目前最新版只到3.2版，請參考：<br>https://github.com/MicrosoftArchive/redis/releases<br><blockquote><p>根據次版本編號(也就是第一個小數點數字)為偶數的版本是穩定版(Stable)，奇數版本為非穩定版</p></blockquote><p>變成手動後要下指令開,關閉視窗即關閉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis -server C:\redis.windows.conf</span><br></pre></td></tr></table></figure><p>也可以寫腳本,先開一文字文件,再輸入指令後把檔名改成批次檔(.bat)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">redis-server C:\Redis\redis.windows.conf --appendonly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure><p>開啟執行批次檔後可以使用 CMD 來下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"></span><br><span class="line">IP:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">IP:6379&gt; <span class="built_in">set</span> Hello REdis</span><br><span class="line">OK</span><br><span class="line">IP:6379&gt; get Hello</span><br><span class="line"><span class="string">&quot;REdis&quot;</span></span><br></pre></td></tr></table></figure><p>使用 set , get 方式設定 key,value<br><br><br>輸入資料後可以搭配使用 redis 的圖形化介面來看存取的資料<br><a href="https://github.com/qishibo/AnotherRedisDesktopManager">https://github.com/qishibo/AnotherRedisDesktopManager</a></p><blockquote><p>預設為 16 個儲存空間如需要切換的話需下指令,不切換預設為 db0</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切換到第15個儲存空間</span></span><br><span class="line">jedis.select(<span class="number">15</span>);</span><br></pre></td></tr></table></figure><blockquote><p>與 MySQL 不同,不開放,所以無帳號密碼設定上的需要(扮演暫存,快取角色)</p></blockquote><h1 id="操作資料"><a href="#操作資料" class="headerlink" title="操作資料"></a>操作資料</h1><ul><li>Redis 會根據新增資料使用的指令,自動推斷型別</li><li>預設初始值為 null,key 為唯一,如同名會覆蓋</li></ul><p>字串操作指令 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET key :</span><br><span class="line"></span><br><span class="line">SET key newValue :</span><br><span class="line"></span><br><span class="line">DEL key :</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 Java 中操作指令 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">jedis.set(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">jedis.get(<span class="string">&quot;key&quot;</span>);<span class="comment">//value</span></span><br><span class="line"></span><br><span class="line">jedis.append(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value2&quot;</span>); <span class="comment">//value被替換成value2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回傳value的&#x27;byte&#x27;長度</span></span><br><span class="line">jedis.strlen(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回傳提供索引值(單位為byte)的value,有包含start~end</span></span><br><span class="line">jedis.getrange(<span class="string">&quot;key&quot;</span>,<span class="number">2</span>,<span class="number">5</span>);<span class="comment">//lue2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可用負數表示,從右至左(-1為最後一個byte,-2為倒數第二個)</span></span><br><span class="line">jedis.getrange(<span class="string">&quot;key&quot;</span>,-<span class="number">3</span>,-<span class="number">1</span>);<span class="comment">//ue2</span></span><br></pre></td></tr></table></figure><h2>多筆資料處理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jedis.mset(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>, <span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>, <span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line">List&lt;String&gt; data = jedis.mget(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;key2&quot;</span>, <span class="string">&quot;key3&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String str : data)</span><br></pre></td></tr></table></figure><h2>處理整數資料</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">jedis.incr(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//incr(); 會直接做加總,在圖形化介面可以看到value為100</span></span><br><span class="line">jedis.decr(<span class="string">&quot;num&quot;</span>);</span><br><span class="line"><span class="comment">// 會減一</span></span><br></pre></td></tr></table></figure><blockquote><p>你的 value 必須為數字格式才能使用以上方法</p></blockquote><h2>處理位元資料</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位元</span></span><br><span class="line"><span class="comment">//       b           a            r</span></span><br><span class="line"><span class="comment">//   01100010     01100001     01110010</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                 OR運算</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//       a           a            r</span></span><br><span class="line"><span class="comment">//   01100001     01100001     01110010</span></span><br><span class="line"><span class="comment">//   ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//       c           a            r</span></span><br><span class="line"><span class="comment">//   01100011     01100001     01110010</span></span><br><span class="line">jedis.set(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">System.out.println(jedis.getbit(<span class="string">&quot;foo&quot;</span>, <span class="number">6</span>));<span class="comment">//回傳為true</span></span><br><span class="line"></span><br><span class="line">jedis.setbit(<span class="string">&quot;foo&quot;</span>, <span class="number">6</span>, <span class="literal">false</span>);</span><br><span class="line">jedis.setbit(<span class="string">&quot;foo&quot;</span>, <span class="number">7</span>, <span class="literal">true</span>);</span><br><span class="line">System.out.println(jedis.get(<span class="string">&quot;foo&quot;</span>));<span class="comment">//bar -&gt; aar</span></span><br><span class="line"></span><br><span class="line">jedis.set(<span class="string">&quot;foo1&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">jedis.set(<span class="string">&quot;foo2&quot;</span>, <span class="string">&quot;aar&quot;</span>);</span><br><span class="line">jedis.bitop(BitOP.OR, <span class="string">&quot;result&quot;</span>, <span class="string">&quot;foo1&quot;</span>, <span class="string">&quot;foo2&quot;</span>);</span><br><span class="line">System.out.println(jedis.get(<span class="string">&quot;result&quot;</span>));<span class="comment">//car</span></span><br></pre></td></tr></table></figure><h2>List資料</h2><ul><li>List 如同 LinkedList，或是可視為佇列或堆疊進行操作，因為可以進行 List 的左右兩端的加入與移除，或是取得某一部份內容，但搭配索引值存取的效能表現就較不理想</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 從左邊放入</span></span><br><span class="line">jedis.lpush(<span class="string">&quot;customers&quot;</span>, <span class="string">&quot;David&quot;</span>, <span class="string">&quot;James&quot;</span>, <span class="string">&quot;Vincent&quot;</span>, <span class="string">&quot;Ben&quot;</span>, <span class="string">&quot;Ron&quot;</span>, <span class="string">&quot;George&quot;</span>, <span class="string">&quot;Howard&quot;</span>);</span><br><span class="line"><span class="comment">// List內容：&quot;Howard&quot;, &quot;George&quot;, &quot;Ron&quot;, &quot;Ben&quot;, &quot;Vincent&quot;, &quot;James&quot;, &quot;David&quot;</span></span><br><span class="line"></span><br><span class="line">jedis.lpop(<span class="string">&quot;customers&quot;</span>);<span class="comment">//Howard,拿到最左邊的value且移除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 從右邊放入</span></span><br><span class="line">jedis.rpush(<span class="string">&quot;customers&quot;</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="string">&quot;Joe&quot;</span>, <span class="string">&quot;Smith&quot;</span>);</span><br><span class="line"><span class="comment">// List內容：&quot;George&quot;, &quot;Ron&quot;, &quot;Ben&quot;, &quot;Vincent&quot;, &quot;James&quot;, &quot;David&quot;, &quot;Jerry&quot;, &quot;Joe&quot;, &quot;Smith&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿出但不移除</span></span><br><span class="line">List&lt;String&gt; range1 = jedis.lrange(<span class="string">&quot;customers&quot;</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span> (String customer : range1)</span><br><span class="line">System.out.println(customer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回傳元素個數,key不存在就回傳0</span></span><br><span class="line">jedis.llen(<span class="string">&quot;customers&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//去頭去尾,等於你要保留的索引值</span></span><br><span class="line">jedis.ltrim(<span class="string">&quot;customers&quot;</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">List&lt;String&gt; range2 = jedis.lrange(<span class="string">&quot;customers&quot;</span>, <span class="number">0</span>, jedis.llen(<span class="string">&quot;customers&quot;</span>) - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//List&lt;String&gt; range2 = jedis.lrange(&quot;customers&quot;, 0, - 1); 最右邊為-1</span></span><br><span class="line"><span class="keyword">for</span> (String customer : range2)</span><br><span class="line">    System.out.println(customer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素</span></span><br><span class="line">jedis.linsert(<span class="string">&quot;customers&quot;</span>, LIST_POSITION.BEFORE, <span class="string">&quot;David&quot;</span>, <span class="string">&quot;Jedis&quot;</span>);<span class="comment">//插入在David前面</span></span><br><span class="line"><span class="comment">//也可LIST_POSITION.AFTER</span></span><br><span class="line">List&lt;String&gt; range3 = jedis.lrange(<span class="string">&quot;customers&quot;</span>, <span class="number">0</span>, jedis.llen(<span class="string">&quot;customers&quot;</span>) - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (String customer : range3)</span><br><span class="line">System.out.println(customer);</span><br></pre></td></tr></table></figure><h2>Hash資料</h2><ul><li>目的是讓 Redis 可以如同關聯式資料庫(表格-欄位)的存取對應關係</li><li>Hash 型態也是一種 key-value 結構，儲存欄位與對應的值，但值只能是字串資料，不支援其它型態，因此不能做巢狀結構 (Redis 所有資料型態都不支援巢狀資料結構)</li><li>Hash 型態很適合用來儲存物件，利用物件所屬類別與 ID 做為 key，而實體變數名稱做為欄位，而欄位值存著實體變數的值</li><li>可在購物車使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jedis.hset(<span class="string">&quot;pen:1&quot;</span>, <span class="string">&quot;brand&quot;</span>, <span class="string">&quot;SKB&quot;</span>);</span><br><span class="line">jedis.hset(<span class="string">&quot;pen:1&quot;</span>, <span class="string">&quot;price&quot;</span>, <span class="string">&quot;10&quot;</span>);</span><br><span class="line">jedis.hget(<span class="string">&quot;pen:1&quot;</span>, <span class="string">&quot;brand&quot;</span>);<span class="comment">//SKB</span></span><br><span class="line">jedis.hget(<span class="string">&quot;pen:1&quot;</span>, <span class="string">&quot;price&quot;</span>);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><h2>Set</h2><ul><li>重複資料無法放入,資料為唯一</li><li>key 之間還能進行聯集、交集與差集等運算 (如文章分類標籤)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">jedis.sadd(<span class="string">&quot;post:1:tags&quot;</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;post:2:tags&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Servlet&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;post:3:tags&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Servlet&quot;</span>, <span class="string">&quot;JSP&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;tag:Java:posts&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;tag:Servlet:posts&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;tag:JSP:posts&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String str : jedis.smembers(<span class="string">&quot;post:3:tags&quot;</span>)) &#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">jedis.sismember(<span class="string">&quot;post:2:tags&quot;</span>, <span class="string">&quot;JSP&quot;</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集運算</span></span><br><span class="line">jedis.sdiff(<span class="string">&quot;A集合&quot;</span>,<span class="string">&quot;B集合&quot;</span>); <span class="comment">//A-B剩下的東西,A比B多了什麼</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集運算</span></span><br><span class="line">jedis.sinter(<span class="string">&quot;A集合&quot;</span>,<span class="string">&quot;B集合&quot;</span>);<span class="comment">//屬於A也屬於B的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 聯集運算</span></span><br><span class="line">jedis.sunion(<span class="string">&quot;A集合&quot;</span>,<span class="string">&quot;B集合&quot;</span>);<span class="comment">//A+B,重複的不放</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 放入資料</span></span><br><span class="line">jedis.sadd(<span class="string">&quot;candidate&quot;</span>, <span class="string">&quot;David&quot;</span>, <span class="string">&quot;James&quot;</span>, <span class="string">&quot;Vincent&quot;</span>, <span class="string">&quot;Peter&quot;</span>, <span class="string">&quot;Ron&quot;</span>, <span class="string">&quot;George&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//隨機拿取不重複</span></span><br><span class="line">System.out.println(jedis.srandmember(<span class="string">&quot;candidate&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回傳List&lt;String&gt;,拿3個,如為負數就可以重複</span></span><br><span class="line">System.out.println(jedis.srandmember(<span class="string">&quot;candidate&quot;</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// System.out.println(jedis.srandmember(&quot;candidate&quot;, -3));</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2>Zset</h2><ul><li><p>Zset(Sorted Set)與 Set 不同之處就在於是有序性的。每個元素都會連結一個分數，讓我們可以輕鬆完成最高(或最低)的前 N 個元素</p></li><li><p>Zset 與 List 也有些相似，兩者皆為有序性，也都能取得某一個範圍的元素，但使用的情境卻是不同的：</p></li></ul><ol><li>List 是 Linked 結構，所以對兩端資料存取效率極高，但對中間元素處理較慢，適合用在新的資料或最舊的資料(兩端)存取</li><li>Zset 非 Linked 結構，即使是取中間元素資料速度也很快</li><li>List 要調整某個元素位置效能表現不佳，但 Zset 表現極佳(透過調整元素連結的分數即可)</li><li>Zset 比起 List 更耗費記憶體的使用</li></ol><ul><li>分數資料可以使用整數之外也可以使用浮點數</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Double&gt; scores1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">scores1.put(<span class="string">&quot;David&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">100</span>));</span><br><span class="line">scores1.put(<span class="string">&quot;James&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">85</span>));</span><br><span class="line">scores1.put(<span class="string">&quot;Ron&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">67</span>));</span><br><span class="line">scores1.put(<span class="string">&quot;Vincent&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">72</span>));</span><br><span class="line">scores1.put(<span class="string">&quot;George&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">87</span>));</span><br><span class="line">scores1.put(<span class="string">&quot;Howard&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">75</span>));</span><br><span class="line">scores1.put(<span class="string">&quot;Peter&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">80</span>));</span><br><span class="line"></span><br><span class="line">Map&lt;String, Double&gt; scores2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">scores2.put(<span class="string">&quot;David&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">90</span>));</span><br><span class="line">scores2.put(<span class="string">&quot;James&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">77</span>));</span><br><span class="line">scores2.put(<span class="string">&quot;Ron&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">78</span>));</span><br><span class="line">scores2.put(<span class="string">&quot;Vincent&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">68</span>));</span><br><span class="line">scores2.put(<span class="string">&quot;George&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">95</span>));</span><br><span class="line">scores2.put(<span class="string">&quot;Howard&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">81</span>));</span><br><span class="line">scores2.put(<span class="string">&quot;Peter&quot;</span>, <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">72</span>));</span><br><span class="line"></span><br><span class="line">jedis.zadd(<span class="string">&quot;scores1&quot;</span>, scores1);</span><br><span class="line">jedis.zadd(<span class="string">&quot;scores2&quot;</span>, scores2);</span><br><span class="line"></span><br><span class="line">jedis.zadd(<span class="string">&quot;scores1&quot;</span>, <span class="number">92</span>, <span class="string">&quot;Vincent&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 叫出資料</span></span><br><span class="line">jedis.zscore(<span class="string">&quot;scores1&quot;</span>, <span class="string">&quot;Vincent&quot;</span>); <span class="comment">//92</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 預設為由小到大(分數)</span></span><br><span class="line">jedis.zrange(<span class="string">&quot;scores1&quot;</span>, <span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x27;(&#x27;代表不包含，也可以用+inf或-inf來代表正無窮或負無窮</span></span><br><span class="line">jedis.zrangeByScore(<span class="string">&quot;scores1&quot;</span>, <span class="string">&quot;80&quot;</span>, <span class="string">&quot;(100&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小於等於100分的前3人</span></span><br><span class="line">jedis.zrevrangeByScore(<span class="string">&quot;scores1&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加8分</span></span><br><span class="line">jedis.zincrby(<span class="string">&quot;scores1&quot;</span>, <span class="number">8</span>, <span class="string">&quot;Peter&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 他的位置(索引值)-小到大</span></span><br><span class="line">jedis.zrank(<span class="string">&quot;scores1&quot;</span>, <span class="string">&quot;David&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大到小</span></span><br><span class="line">jedis.zrevrank(<span class="string">&quot;scores1&quot;</span>, <span class="string">&quot;David&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加總(預設)後排序</span></span><br><span class="line"><span class="type">ZParams</span> <span class="variable">zp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZParams</span>();</span><br><span class="line"><span class="comment">// Aggregate.SUM(預設) | Aggregate.MAX | Aggregate.MIN</span></span><br><span class="line">jedis.zinterstore(<span class="string">&quot;scoresinter&quot;</span>, zp.aggregate(Aggregate.SUM), <span class="string">&quot;scores1&quot;</span>, <span class="string">&quot;scores2&quot;</span>);</span><br><span class="line">System.out.println(jedis.zrevrange(<span class="string">&quot;scoresinter&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h1 id="JSON-資料格式"><a href="#JSON-資料格式" class="headerlink" title="JSON 資料格式"></a>JSON 資料格式</h1><ul><li>JSON(JavaScript Object Notation)為一種輕量級的資料交換語言，以文字為基礎而讓人容易閱讀理解，在 WEB 的資料傳輸上，佔有相當重要的地位</li></ul><p><b>可以讓不同的程式語言可以互相進行資料傳輸的交換使用,也實現了以文字形式對物件進行序列化</b></p><ul><li>XML 也是類似的概念，但因為 XML 是一種完整標記語言，因此在程式撰寫判讀上比起 JSON 過於笨重與較多心力，故現今瀏覽器解析、手機資料交換都採用較輕量的 JSON 以取得最佳效能</li></ul><p>JSON 是一種以鍵值(key-value)的方式存取資料：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON Object</span></span><br><span class="line"><span class="punctuation">&#123;</span>“myKey”<span class="punctuation">:</span>myValue<span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// JSON Array</span></span><br><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span>“myKey”<span class="punctuation">:</span>myValue<span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span>“myKey2”<span class="punctuation">:</span>myValue2<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>Java SE 沒有包含 JSON API,要 import jar 檔</p><h1 id="Base64-資料格式"><a href="#Base64-資料格式" class="headerlink" title="Base64 資料格式"></a>Base64 資料格式</h1><ul><li><p>Base64 是一種編碼格式，可以將二進制位元資料編成可顯示字元，用來進行儲存或是傳輸資料使用，例如圖片轉成 Base64 字串後，可以用在 HTML 標籤上顯示</p></li><li><p>在 HTTP 協定下，由於是傳輸文字內容，所以其中一種方式就是將二進制位元資料轉成 Base64 格式來進行編碼與反編碼的動作，如電子郵件圖片</p></li></ul><p>Java 8 在 java.util 套件新增了 Base64 類別，即可使用標準 API 進行操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 編碼</span></span><br><span class="line"><span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(<span class="string">&quot;Hello World!&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">System.out.println(encode);</span><br><span class="line"><span class="comment">// 解碼</span></span><br><span class="line"><span class="type">byte</span>[] decode = Base64.getDecoder().decode(encode);</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(decode, <span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure><p>不鼓勵存取大量資料時使用,因為效能差</p><blockquote><p>3 bytes to 4 characters,資料變長,傳輸時間長</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBase64</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;FC_Bayern.png&quot;</span>);</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"><span class="type">byte</span>[] pic = <span class="keyword">new</span> <span class="title class_">byte</span>[fis.available()];</span><br><span class="line">fis.read(pic);</span><br><span class="line">fis.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// encode</span></span><br><span class="line"><span class="type">String</span> <span class="variable">base64str</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(pic);</span><br><span class="line">System.out.println(base64str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// decode</span></span><br><span class="line"><span class="type">byte</span>[] fromBase64str = Base64.getDecoder().decode(base64str);</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fromBase64str.png&quot;</span>);</span><br><span class="line">fos.write(fromBase64str);</span><br><span class="line">fos.flush();</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Redis-交易機制"><a href="#Redis-交易機制" class="headerlink" title="Redis 交易機制"></a>Redis 交易機制</h1><ul><li>交易裡的所有指令都是循序執行，而交易執行期間，Redis 就不會再接受其它用戶端的請求提供任何服務，以確保原子性(A)執行</li><li>與關聯式資料庫不同，若是其中有指令執行失敗，Redis 會繼續執行後續的指令 <b>(沒有 rollback 機制)</b></li><li>交易開啟之前，若通訊發生故障，則所有交易指令都不會執行;但若是已經執行 EXEC 指令之後發生通訊故障，則指令都會被 Redis 執行</li></ul><h1 id="Redis-資料存活機制-TTL-Time-To-Live"><a href="#Redis-資料存活機制-TTL-Time-To-Live" class="headerlink" title="Redis 資料存活機制 TTL(Time To Live)"></a>Redis 資料存活機制 TTL(Time To Live)</h1><ul><li>在開發功能時，可能會遇到一些有時效性的資料處理，例如限時優惠、快取機制，或是驗證信件點擊處理等，過了一定時間就要做資料刪除的動作，而 Redis 就提供了這樣的功能，可以對 key 設定存活時間，只要指定的時間到期，由 Redis 自動刪除</li></ul><p>指令 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">jedis.set(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="comment">//設定過期時間(單位為秒)</span></span><br><span class="line">jedis.expire(<span class="string">&quot;test&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得剩餘秒數</span></span><br><span class="line">jedis.ttl(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得剩餘毫秒數</span></span><br><span class="line">jedis.pttl(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消expire</span></span><br><span class="line">jedis.persist(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// second指的是系統時間(1970-01-01 00:00:00)起始秒數</span></span><br><span class="line"><span class="comment">// 精準控制用</span></span><br><span class="line">jedis.expireat(<span class="string">&quot;test&quot;</span>, <span class="number">10</span>);</span><br><span class="line">jedis.pexpireat(<span class="string">&quot;test&quot;</span>, <span class="number">10</span>);<span class="comment">//同上,只是單位為毫秒</span></span><br></pre></td></tr></table></figure><h1 id="Redis-持久化機制"><a href="#Redis-持久化機制" class="headerlink" title="Redis 持久化機制"></a>Redis 持久化機制</h1><ul><li><p>Redis 提供了兩種持久化機制：<br>RDB(預設)與 AOF。讓我們可以對在記憶體裡面的資料透過兩種不同機制(或是混搭)，可以進行硬碟保存的永續操作</p><ol><li>DB 是透過快照機制完成，當符合設定檔裡的條件，即把所有在記憶體裡的資料進行快照並儲存在硬碟裡</li><li>AOF 是滿足條件即把資料透過 append 的方式，附加在硬碟檔案裡面</li></ol></li></ul><h2>RDB</h2>官方的設定檔redis.conf裡就預置了三個RDB啟動快照的條件：<ol><li>save 900 1 (單位:秒&#x2F;資料量)</li><li>save 300 10</li><li>save 60 10000</li></ol><p>RDB 優點 :</p><ul><li>使用 RDB 對整個 Redis 資料庫來說就是一個檔案，因此在進行資料恢復時，可以做到較輕鬆的處理</li><li>RDB 採用子程序處理快照動作，這對 Redis 服務來說執行效率較佳</li></ul><p>RDB 缺點 :</p><ul><li>若是在 RDB 持久化未進行的期間發生當機等中斷服務狀態時，資料都將會遺失</li><li>若是一次要快照的資料較大時，會影響到 Redis 程序的運作</li></ul><h2>AOF</h2>AOF設定條件 (2)為預設設定：1. appendfsync always2. appendfsync everysec3. appendfsync no<p>AOF 優點：</p><ul><li>帶來更高的資料持久性與安全性，因為是採取同步機制進行儲存</li><li>因為採用 append 機制，所以寫入中發生當機現象，也不會破壞原有的內容，也有 redis-check-aof 工具可以協助解決資料一致性問題</li><li>AOF 包含一個完整記錄檔記錄了所有的修改操作，也可以透過 AOF 完成資料重建的動作</li></ul><p>AOF 缺點：</p><ul><li>對相同的資料量來說，AOF 的檔案會比 RDB 檔案來得大</li><li>因為採用同步方式，所以 AOF 在執行的效能上慢於 RDB 機制</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis-REmote-DIctionary-Server&quot;&gt;&lt;a href=&quot;#Redis-REmote-DIctionary-Server&quot; class=&quot;headerlink&quot; title=&quot;Redis(REmote DIctionary Server)&quot;</summary>
      
    
    
    
    <category term="技術" scheme="https://example.com/categories/%E6%8A%80%E8%A1%93/"/>
    
    
    <category term="DB" scheme="https://example.com/tags/DB/"/>
    
    <category term="Redis" scheme="https://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>JDBC筆記</title>
    <link href="https://example.com/2022/12/17/JDBC%E7%AD%86%E8%A8%98/"/>
    <id>https://example.com/2022/12/17/JDBC%E7%AD%86%E8%A8%98/</id>
    <published>2022-12-17T09:52:36.000Z</published>
    <updated>2023-02-16T13:57:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先來複習-SQL-語法"><a href="#先來複習-SQL-語法" class="headerlink" title="先來複習 SQL 語法"></a>先來複習 SQL 語法</h1><blockquote><p>SQL 最重要的增刪改查要先知道,因為會在 Java 程式裡面用到!</p></blockquote><ul><li>DDL - 資料定義語⾔ (Data Definition Language)<br><i>建立、修改或移除資料庫或其他資料庫物件的語法,以 CREATE、ALTER、DROP 語法為主</i></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 新增資料庫</span></span><br><span class="line"><span class="keyword">create</span> schema bookshop;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 新增資料庫內表格</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> publisher (</span><br><span class="line">  publisher_id <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">primary</span> key <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="comment">-- PK 一定 not null，所以可省略</span></span><br><span class="line">  publisher_name <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">unique</span>, <span class="comment">-- UK 可以為 null</span></span><br><span class="line">  contact <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">  phone <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">  create_time <span class="type">timestamp</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">current_timestamp</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 刪除資料庫</span></span><br><span class="line"><span class="keyword">drop</span> schema bookshop;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在資料庫中新增欄位</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> publisher <span class="keyword">ADD</span> Discount <span class="type">VARCHAR</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li>DML - 資料處理語⾔ (Data Manipulation Language)<br><i>處理表格內資料的語法,以 INSERT、UPDATE、DELETE 語法為主</i></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不輸入值就不要給欄位名稱</span></span><br><span class="line"><span class="comment">-- 不用照著欄位表格是OK的,如果是文字的話使用&#x27;&#x27;</span></span><br><span class="line"><span class="comment">-- 跳脫可以用\</span></span><br><span class="line"><span class="comment">-- INSERT</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> publisher(publisher_id, publisher_name, contact, phone)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;P001&#x27;</span>, <span class="string">&#x27;OReilly&#x27;</span>, <span class="string">&#x27;Ocean&#x27;</span> , <span class="string">&#x27;02-23456789&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;P002&#x27;</span>, <span class="string">&#x27;John Wiley, Sons Inc&#x27;</span>, <span class="string">&#x27;Don&#x27;</span> , <span class="string">&#x27;03-36962869&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- UPDATE</span></span><br><span class="line"><span class="keyword">update</span> publisher <span class="keyword">set</span> contact <span class="operator">=</span> <span class="string">&#x27;John&#x27;</span>, phone <span class="operator">=</span> <span class="string">&#x27;07-1234567765&#x27;</span></span><br><span class="line"><span class="keyword">where</span> publisher_id <span class="operator">=</span> <span class="string">&#x27;P00X&#x27;</span>;</span><br><span class="line"><span class="comment">-- 條件寫在最後,如果條件不具有唯一性也不行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- DELETE</span></span><br><span class="line"><span class="keyword">delete</span> sth <span class="keyword">from</span> publisher</span><br><span class="line"><span class="keyword">where</span> publisher_id <span class="operator">=</span> <span class="string">&#x27;P001&#x27;</span> <span class="keyword">or</span> publisher_id <span class="operator">=</span> <span class="string">&#x27;P002&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>DQL - 資料查詢語言(Data Query Language)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> publisher;</span><br></pre></td></tr></table></figure><ul><li>DCL - 資料控制語⾔ (Data Control Language)</li></ul><h1 id="JDBC-是什麼"><a href="#JDBC-是什麼" class="headerlink" title="JDBC 是什麼"></a>JDBC 是什麼</h1><ul><li>JDBC 屬於 Java SE 版 API</li><li>JDBC Driver 由資料庫廠商提供，通常以 JAR 檔案形式存在</li><li>Java app 使⽤ JDBC API 透過資料庫廠商提供的 JDBC Driver 存取該廠商的資料(所以要設定 Driver)</li></ul><h1 id="註冊-JDBC-driver-類別"><a href="#註冊-JDBC-driver-類別" class="headerlink" title="註冊 JDBC driver 類別"></a>註冊 JDBC driver 類別</h1><blockquote><p>JDBC4.0 之前必須先註冊 JDBC driver 類別後⽅能初始化 driver 物件,JDBC 4.0 開始會⾃動註冊,但還是建議放上去</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="建立資料庫連結"><a href="#建立資料庫連結" class="headerlink" title="建立資料庫連結"></a>建立資料庫連結</h1><ul><li>需提供資料庫的 URL、帳號與密碼<br><br><i>可能產⽣ SQLException 所以要放在 try catch 裡面</i></li><li>當 JDBC 程式即將結束前要關閉連結以釋放資源<br><br>將關閉連結的程式碼放在 finally 區塊內</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,user, password);</span><br><span class="line"><span class="comment">// MySQL的URL為jdbc:mysql://localhost:3306/db01?serverTimezone=Asia/Taipei</span></span><br><span class="line"><span class="comment">// db01為你要連線的資料庫名</span></span><br></pre></td></tr></table></figure><h1 id="建立-Statement"><a href="#建立-Statement" class="headerlink" title="建立 Statement"></a>建立 Statement</h1><ul><li>建立完 Connection 可以取得 Statement</li><li>負責將 SQL 語法送到資料庫端執⾏並將結果回傳⾄ client 端</li></ul><p>有 2 種做法,一種是使用 Statement 類別,或是其子類別 PreparedStatement,差別為:</p><ul><li>提升安全性：Prepared statement 可以透過將資料和查詢分開來保護你的資料庫免受 SQL injection 攻擊</li><li>提升效能：Prepared statement 會先被資料庫伺服器預先編譯，所以執行速度比起標準的 statement 會快很多</li><li>更易使用：Prepared statement 可以被用來執行相同的查詢多次，只需要改變參數，這有助於讓你的程式碼更容易閱讀和維護</li></ul><p>總的來說，當你需要多次執行相同的查詢並改變參數時，或者想要提升資料庫查詢的安全性和效能時，Prepared statement 是個不錯的選擇。</p><blockquote><p>建議使用 PreparedStatement,但 Statement 一樣要會,批次加入會用到</p></blockquote><p>以下皆用 DQL 舉例<br><br><br>Statement 用法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argv[])</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">              Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.lang.ClassNotFoundException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;ClassNotFoundException: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span>  DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">            <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> con.createStatement();</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(<span class="string">&quot;SELECT * from emp2&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;EMPNO&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                System.out.print(<span class="string">&quot; EMPNO= &quot;</span> + str1);</span><br><span class="line">                System.out.print(<span class="string">&quot; ENAME= &quot;</span> + str2);</span><br><span class="line">                System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rs.close();</span><br><span class="line">            stmt.close();</span><br><span class="line">            con.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;SQLException: &quot;</span> + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>PreparedStatement 用法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ResultSetDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">rowCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select isbn, book_name, price, author, publication_date, publisher_id &quot;</span></span><br><span class="line">   + <span class="string">&quot;from book where book_name like ?;&quot;</span>;</span><br><span class="line">List&lt;Book&gt; books = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql)) &#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;%java%&quot;</span>);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">isbn</span> <span class="operator">=</span> rs.getString(<span class="number">1</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">bookName</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> rs.getDouble(<span class="number">3</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> rs.getString(<span class="number">4</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">publicationDate</span> <span class="operator">=</span> rs.getObject(<span class="number">5</span>, LocalDate.class);</span><br><span class="line"><span class="type">String</span> <span class="variable">publisherId</span> <span class="operator">=</span> rs.getString(<span class="number">6</span>);</span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(isbn, bookName, price, author, publicationDate, publisherId);</span><br><span class="line">books.add(book);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;books.size=&quot;</span>+books.size());</span><br><span class="line">rs.last();</span><br><span class="line">rowCount = rs.getRow();</span><br><span class="line">System.out.println(<span class="string">&quot;-----total &quot;</span> + rowCount + <span class="string">&quot; row(s)-----&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Book book : books) &#123;</span><br><span class="line">System.out.println(book);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用完之後，如果要重複使用這個 PreparedStatement 的話，可以使用</span></span><br><span class="line">clearParameters();</span><br><span class="line"><span class="comment">// 方法將將之前指定的值給清空，就可以繼續使用了！</span></span><br></pre></td></tr></table></figure><blockquote><p>Statement 沒有提供 set 方法,因此無法透過參數化方式執行 DQL,會有 SQL injection 的風險!</p></blockquote><p>參考資料 : <a href="https://www.jendow.com.tw/wiki/PreparedStatement">https://www.jendow.com.tw/wiki/PreparedStatement</a><br><br></p><h1 id="執行-DDL-語法"><a href="#執行-DDL-語法" class="headerlink" title="執行 DDL 語法"></a>執行 DDL 語法</h1><ul><li>DDL 語法會改變資料庫內容，需要呼叫 Statement.executeUpdate()</li><li>如果要執⾏⼤量 SQL 語法，可使⽤批次功能<br><ol><li>DatabaseMetaData.supportsBatchUpdates() 檢查是否⽀援批次功能<br></li><li>呼叫 Statement.addBatch(sql) 將欲執⾏的語法置入<br></li><li>呼叫 Statement.executeBatch() 實現批次執⾏功能</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;先來複習-SQL-語法&quot;&gt;&lt;a href=&quot;#先來複習-SQL-語法&quot; class=&quot;headerlink&quot; title=&quot;先來複習 SQL 語法&quot;&gt;&lt;/a&gt;先來複習 SQL 語法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;SQL 最重要的增刪改查要先知道,因為會在</summary>
      
    
    
    
    <category term="筆記" scheme="https://example.com/categories/%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="Java" scheme="https://example.com/tags/Java/"/>
    
    <category term="JDBC" scheme="https://example.com/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Java學習筆記(二)</title>
    <link href="https://example.com/2022/12/14/Java%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-2/"/>
    <id>https://example.com/2022/12/14/Java%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-2/</id>
    <published>2022-12-14T15:24:25.000Z</published>
    <updated>2023-02-16T13:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="關於傳值與傳址"><a href="#關於傳值與傳址" class="headerlink" title="關於傳值與傳址"></a>關於傳值與傳址</h1><div>這在定義上有些爭議,但現在大部分認為是傳址,因為<b>門牌號碼也是一份值</b>。</div><br><h1 id="所謂類別"><a href="#所謂類別" class="headerlink" title="所謂類別"></a>所謂類別</h1><div>Java是一種以類別為基礎(class-based)的程式語言,透過類別來定義屬性以及方法,並用該類別產生的物件實體(object instance)進行功能上的實現與架構設計。我們也藉由類別來達成封裝、繼承與多型三種概念。</div><h1 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h1><div>陣列是由一群<b>相同資料型態</b>的變數所組成的一種資料結構。必須在宣告時就定義長度才能操作。記得索引值由0開始。</div>    <span>一維陣列宣告方式為:</span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="type">int</span>[] x = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="type">int</span> x[] = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br></pre></td></tr></table></figure><div>另外,程式進入點main方法可以接受零至多個字串當作參數(String args[])傳入，String args[]其實就是一個字串陣列。</div><br><div>陣列必須用new關鍵字來分配陣列的儲存空間，所以：<br><ul><li>陣列也是一種Reference資料型態</li><li> 陣列的指定運算，也是傳遞陣列的記憶體位址(memory address) </li><li>陣列使用new關鍵字分配好儲存空間後，所有元素都會自動賦予初始值(和實體變數一樣)</li></ul></div><h2>存取陣列</h2><div>取得陣列的長度：<ul> <li>語法：陣列名稱.length</li> <li>一維陣列為<b>元素個數</b></li> <li>二維陣列為<b>小陣列的數量</b></li> <li>length後面不可以加上小括弧，因為此處的     length並不是方法，而是陣列的一個屬性(跟String類別的length()不同)</li></ul></div><h2>多維陣列</h2><div><ul><li>即為陣列的陣列(巢狀結構)</li><li>也可如一維陣列一般,宣告時給予初值</li><li>非矩形的陣列形式是OK的(每個小陣列的元素數量不同,在宣告時先不給值而是後續去指定)</li></ul></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> xx[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][];</span><br><span class="line">    xx[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">3</span>];</span><br><span class="line">    xx[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">4</span>];</span><br><span class="line">    xx[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">5</span>];</span><br><span class="line">    xx[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p><span>常用的方法:</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] intArray = &#123;<span class="number">250</span>,<span class="number">100</span>,<span class="number">300</span>&#125;;</span><br><span class="line"><span class="comment">// 陣列的排序</span></span><br><span class="line">Array.sort(intArray);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 陣列的複製</span></span><br><span class="line"><span class="type">int</span>[] intArray2 = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>&#125;;</span><br><span class="line"><span class="comment">//呼叫copyOf方法並傳入兩個參數：欲複製的陣列、欲複製的陣列長度 長度超過原來的長度其他為預設初始值,不需要new即可生成新的址的陣列</span></span><br><span class="line"><span class="type">int</span>[] intArray2B = Arrays.copyOf(intArray2, intArray2.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 陣列的搜尋</span></span><br><span class="line"><span class="type">int</span>[] intArray3 = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">50</span>&#125;;</span><br><span class="line"><span class="comment">// 呼叫binarySearch方法並傳入兩個參數：欲搜尋的陣列、欲搜尋的值</span></span><br><span class="line"><span class="comment">// 注意：欲搜尋前必先將陣列進行排序</span></span><br><span class="line">Arrays.sort(intArray3);</span><br><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> Arrays.binarySearch(intArray3, <span class="number">50</span>);  <span class="comment">// 有要搜尋的值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> Arrays.binarySearch(intArray3, <span class="number">150</span>); <span class="comment">// 沒有搜尋到值,回傳負值</span></span><br></pre></td></tr></table></figure><h1 id="字串池與其不可變性-immutable"><a href="#字串池與其不可變性-immutable" class="headerlink" title="字串池與其不可變性(immutable)"></a>字串池與其不可變性(immutable)</h1><div><ul><li>String一旦宣告後，即不能在原所在記憶體位置改變字串內容</li><li>若是修改文字內容,JAVA會產生新的字串物件存著新的內容</li><li>字串池(String Pool)對池子的資源達到重複利用的機制</li></ul>但如果單獨new一個String物件則會有屬於自己的記憶體空間</div><h2>比較相等</h2><div> == 在Java字串中，比較的是記憶體位址,比較字串內容時，應該使用String物件本身提供的一個方法<br> public boolean equals(Object anObject)</div><h2>String常用的方法</h2><div><ul><li>public char charAt(int index)：透過索引值取得字串內某一個字元</li><li>public int length()：傳回字串長度，也就是字元的數量 (注意空白也算進去)</li><li>public boolean isEmpty()：如果字串長度為0，則回傳true，否則回傳false</li><i>null(空值):<br>1.只能搭配參考變數使用,null不代表任何記憶體位置,所以沒有指向任何一個實體.<br>2.多作為參考變數的初始值使用.</i><li>public String substring(int beginIndex)：擷取從開始索引值的字元至結尾字元的字串</li><li>public String substring(int beginIndex, int endIndex)：擷取從開始索引值的字元至結束索引值的字元之間的字串 (注意結束索引值的字元不取)</li><li>public int compareTo(String anotherString)：比較的方式是由左至右，依照字元ASCII值比較大小</li><i>若回傳值=0，表示兩個字串相等<br>若回傳值 > 0，表示左邊字串大於右邊字串<br>若回傳值 < 0，表示左邊字串小於右邊字串 </i></ul></div><h1 id="不固定參數機制-varargs-jdk-1-5-java5"><a href="#不固定參數機制-varargs-jdk-1-5-java5" class="headerlink" title="不固定參數機制(varargs)~jdk 1.5 java5"></a>不固定參數機制(varargs)~jdk 1.5 java5</h1><div>varargs(不固定參數個數 / 可變參數個數)：<br>1. 方法內可使用 … 點號，宣告<b>可變數目的參數</b><br>2. 可變參數必須放在參數列的最後面<br>3. 方法中最多只能有1個不固定參數的宣告，不能有2個或2個以上的不固定參數</div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddInt</span> &#123;</span><br><span class="line">                                      <span class="comment">//不固定參數被當作陣列</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">varArgTest</span><span class="params">(<span class="type">int</span>... c)</span> &#123; <span class="comment">//... 宣告可變數目的參數</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">sum += c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">AddInt</span> <span class="variable">add</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AddInt</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">sum1</span> <span class="operator">=</span> add.varArgTest(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> add.varArgTest(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;sum1=&quot;</span> + sum1); <span class="comment">// 3</span></span><br><span class="line">System.out.println(<span class="string">&quot;sum2=&quot;</span> + sum2); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;關於傳值與傳址&quot;&gt;&lt;a href=&quot;#關於傳值與傳址&quot; class=&quot;headerlink&quot; title=&quot;關於傳值與傳址&quot;&gt;&lt;/a&gt;關於傳值與傳址&lt;/h1&gt;&lt;div&gt;
這在定義上有些爭議,但現在大部分認為是傳址,因為&lt;b&gt;門牌號碼也是一份值&lt;/b&gt;。
&lt;/div</summary>
      
    
    
    
    <category term="筆記" scheme="https://example.com/categories/%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="Java" scheme="https://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>一個多月來的學習心得</title>
    <link href="https://example.com/2022/12/08/%E4%B8%80%E5%80%8B%E5%A4%9A%E6%9C%88%E4%BE%86%E7%9A%84%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/"/>
    <id>https://example.com/2022/12/08/%E4%B8%80%E5%80%8B%E5%A4%9A%E6%9C%88%E4%BE%86%E7%9A%84%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/</id>
    <published>2022-12-08T11:42:31.000Z</published>
    <updated>2023-02-16T13:55:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><span>首先,要說的是</span></p><h1 id="祝我生日快樂"><a href="#祝我生日快樂" class="headerlink" title="祝我生日快樂!!!"></a>祝我生日快樂!!!</h1><div>雖然已經過去2天了,但今年真的很開心到非常多的祝福。<br>今年25歲生日,收到來自社群的祝福,現實的祝福,補習班新的好朋友們的祝福(他們還買蛋糕幫我慶生嗚嗚嗚),真的是非常的感動。</div><br><div>我想今年年初做的這個轉職的決定真的是非常好的決定,很慶幸自己做了決定,很開心自己喜歡這條路。不敢說我自己很厲害,但確實理解力不錯XD而且開心到半夜不睡覺爬起來寫扣的程度,老實說我被我自己嚇到了。我一直以為我自己是三分鐘熱度的人,但原來不是三分鐘熱度,而是有沒有想要做這件事。</div><br><div>從一開始學習到現在,大約學了幾種技術,包含HTML5, CSS, JavaScript, Java SE, MySQL, JDBC, jQuery,包含專案規畫開發以及現在在學的servlet技術回頭看原來我已經學了這麼多了!但我明白學了和會了是2回事,尤其是JS一開始快被它搞瘋到現在漸漸習慣(看書的成果嗚嗚),我好像有意識到自己可能有慢慢變厲害(但還是很菜)。</div><br><div>很少的時候會覺得焦慮,懷疑自己是不是不夠認真,但其實自己清楚知道我的橡皮筋已經拉到一個度了,再拉下去的結果不是我想要的,於是還是照著自己的節奏。睡前翻2頁Java書,有空看JS書,整理一下之前學過的,心態目前調整得還不錯。但同學好像不是這樣的</div><br><div>我明白時間不多會有壓力,但一直想著這件事並且給予組員壓力並不是好事,同班的好朋友便是這樣。或許是身為組長的壓力和出於求好心切的心讓他如此,希望他能好好調整過來。這時其實很慶幸之前的工作當過小主管,雖然沒怎麼管人,但跟著大主管學習到了非常多事情,讓我這個副組長(隱形組長XD)知道怎麼樣做事不會讓人不舒服。</div><br><div>總而言之,言而總之,是開心的一個半月(快要2個月了!),開心自己學得開心,開心自己交到很多好朋友,開心自己今年收到很多禮物(容我吐槽一片650的巧克力我要來看看是什麼神仙美味),<b>我始終相信,人生會過得越來越好。</b></div><br><span><b>生活給我的回饋也是如此:))</b></span>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;span&gt;首先,要說的是&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;祝我生日快樂&quot;&gt;&lt;a href=&quot;#祝我生日快樂&quot; class=&quot;headerlink&quot; title=&quot;祝我生日快樂!!!&quot;&gt;&lt;/a&gt;祝我生日快樂!!!&lt;/h1&gt;&lt;div&gt;雖然已經過去2天了,但今年真的很開心</summary>
      
    
    
    
    <category term="生活" scheme="https://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活小記" scheme="https://example.com/tags/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>Java學習筆記(一)</title>
    <link href="https://example.com/2022/12/03/Java%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-1/"/>
    <id>https://example.com/2022/12/03/Java%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-1/</id>
    <published>2022-12-03T13:57:58.000Z</published>
    <updated>2023-02-16T13:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><i> 在還沒碰到 Java 前,遇過很多的人叫我不要學 Java,學 C#<br>但我學了 Java 之後,覺得挺好的 :))</i></p></blockquote><div>談到Java,敏感一些的人會直覺說出<b>"物件導向!"</b>甚至三大特性信手捻來。一開始學的時候,不懂意思,後來在觸碰到物件導向後覺得簡直是個大魔王。</div><br><div><b>物件導向 OOP</b>,以我自己理解的意思就是東西打包起來丟來丟去XD,以三大特性而言,<b>封裝</b>就是把東西打包起來,也是物件導向中的一個很重要的概念。<br>為什麼呢?這要來說到一個很重要的概念。人類習慣的處理模式是從上到下從左到右一步一步跟著步驟執行,也就是所謂的<b>程序性程式語言</b>在做的事情。而當你在閱讀OOP時,各種類別打包飛來飛去呼叫來呼叫去,對初學者來說簡直就是大魔王,我也不例外。</div><br><blockquote><p>這篇文主要不是要說 OOP,所以我要來開始整理我的筆記啦!</p></blockquote><div>Java中的變數主要分為三種。<b>區域變數、實體變數、類別變數。</b><br><b>區域變數</b>主要declare在method和block之內,又名自動(automatic)變數,暫時(temporary)變數以及stack variables(與其儲存地點相關,主要儲存於stack而非heap)。<br><b>實體變數</b>主要declare在method外,class內。因為其特性不能被冠有static的方法存取,又名成員(member)變數、屬性(attribute)變數。<br><b>類別變數</b>說簡單不簡單,說難不難。要記得前面加了修飾子static的人就是它,又名靜態變數。其特性非常特別,類似於在其他語言裡面聽到的全域(global)變數,宣告在類別之內,可以被這個類別new出來的物件所共享使用。</div><br><div>變數的命名,除了基本的以外,要記得常數通常用大寫!!</div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><div>運算子的部分,比較要注意的就是短路運算 || 和 | 以及 && 和 & 的差別(短路運算即為if || 前為true後就不執行)。以及三元運算子(我自己老是會忘記用這個,但這個意想不到的好用,JS也可以用)</div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a ? b : c ;</span><br></pre></td></tr></table></figure><div>如果a為true執行b,false則是c.</div><br><div>再來則是流程控制的部分了!switch...case如果可以盡量不要用,少加了break會很危險!直接全部給你做下去。<br>初學者很容易搞混(至少我是)的部分是接下來在迴圈裡面2個重要的關鍵字。break和continue。<br><b>break</b>的作用是"跳離"迴圈<br><b>continue</b>的作用是"跳過"continue以下的敘述,回到迴圈的<b>起始點</b>。</div><div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;i&gt; 在還沒碰到 Java 前,遇過很多的人叫我不要學 Java,學 C#&lt;br&gt;但我學了 Java 之後,覺得挺好的 :))&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div&gt;
談到Java,敏感一些的人會直覺說出&lt;b&gt;&quot;物件導向!&quot;&lt;/b</summary>
      
    
    
    
    <category term="筆記" scheme="https://example.com/categories/%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="Java" scheme="https://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>關於我為什麼開始學程式這件事</title>
    <link href="https://example.com/2022/12/01/%E9%97%9C%E6%96%BC%E6%88%91%E7%82%BA%E4%BB%80%E9%BA%BC%E9%96%8B%E5%A7%8B%E5%AD%B8%E7%A8%8B%E5%BC%8F%E9%80%99%E4%BB%B6%E4%BA%8B/"/>
    <id>https://example.com/2022/12/01/%E9%97%9C%E6%96%BC%E6%88%91%E7%82%BA%E4%BB%80%E9%BA%BC%E9%96%8B%E5%A7%8B%E5%AD%B8%E7%A8%8B%E5%BC%8F%E9%80%99%E4%BB%B6%E4%BA%8B/</id>
    <published>2022-12-01T15:57:13.000Z</published>
    <updated>2023-02-24T10:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>#說到人生道路這件事……</p><blockquote><p><i>我曾經想過,自己是否想要遵循一般人的道路,學生時代努力念書,考社會認定的好學校,拿個證照可以混口飯吃…</i></p></blockquote><div>我的人生很特別,我很喜歡,我真正發現這件事是近一年的事了。<br>回憶起來,我目前的前半段人生和大部分的人差不了多少。<br>從小不斷的被告知學生很輕鬆、很幸福，以考上好學校為目標一直前進。但我的成績,不能說很好,大約是落在中游罷了,我心底自己很清楚,我沒有怎麼費力,靠著那一點小聰明混著,上了高中,選了三類組,當時的我不太知道自己未來想做什麼,對什麼有興趣,只覺得學多了沒有壞處,三類組甚至有很多證照可以考呢!<div><br>在發生了一些事情後,我的第一份工作是在上市市調公司的資訊部門做QC(資料檢查)的工作。做了大約半年左右後,主管覺得我很聰明(並非我在自誇XD),開始教我做一些debug的事情。<br><br>當時使用的軟體是MRDCL(我不曉得為甚麼忘不了這個字),學起來就覺得很開心,但這份工作終究是工讀性質,做了一年後因為疫情忍痛結束,當起了牙科助理。</div><br><div>直到最近一年,很多事情在我心中才開始明朗,包含我其實是一個無法接受自己在原地踏步這件事。當牙助雖然在一年就當上了小主管,但日復一日,機械式的工作,沒有辦法再進步更多使我有點喘不過氣。再加上醫療界一些黑暗和不公,慣老闆讓我太不爽了,心中暗自計畫存錢了半年,毅然決然離職開始我的程式之路。<br><p>是到 24 歲這年我發現,我並不討厭程式,甚至寫起來滿開心這件事。我也回想起過去人生的種種,包含大學拿過最高分的一門課就是程式。想起來也覺得不可思議,但在一門一學期的課內塞了 3 種語言真的是不可思議(R,PERL,PYTHON),學起來也是囫圇吞棗,連型別都不清不楚,但真的是我人生中滿重要的一環。</p></div><br><div>我是一個滿有自知之明的人,從以前我就知道自己三分鐘熱度。直到後來才發現,我真正喜歡願意堅持的事情是有的。在計畫轉職的半年間,我為了怕自己是三分鐘熱度而開始自學C語言(不多,也滿淺薄的),才真正確定這是我可以走的一條道路。開始上課後,有點累也是半夜起來寫作業,只因我掛念我沒有把它寫出來,我真正確定這是我的道路沒錯。學程式的朋友說我有天分也聰明,我在心裡想說"天啊!太適合我了吧XD"</div><br><div>在提離職後的一個月,和研究所畢業的大學同學一起吃了頓飯。分享了我提早離開學校後的種種,以及對人生的看法。她說她至今仍找不到真正想做的事,即使唸完了研究所。我們聊了聊,她說滿佩服我,大部分人沒有我這樣的勇氣敢做這些決定。我到這次談話後才確定,我不想走計畫好的人生,所以我的人生真的做出了很多旁人看了都覺得瘋狂的決定。但我一直相信我會活得很好,我感恩我遇到的一切,我是那麼的幸運,我也相信從今往後會一直這麼地順利下去。</div><br><div>最後,也是在滿多年前,我一個非常好的朋友說過的話,越驗證我越喜歡的一句話</div><br><blockquote><p><i>“我難以想像伶伶的未來會長甚麼樣子” </i></p></blockquote><br><br><span>我只能說,能被預測太沒有意思了XD所以我喜歡現在的自己。</span>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#說到人生道路這件事……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;i&gt;我曾經想過,自己是否想要遵循一般人的道路,學生時代努力念書,考社會認定的好學校,拿個證照可以混口飯吃…&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div&gt;
我的人生很特別,我很喜歡,我真正發現這件事</summary>
      
    
    
    
    <category term="生活" scheme="https://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活小記" scheme="https://example.com/tags/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%A8%98/"/>
    
  </entry>
  
</feed>
